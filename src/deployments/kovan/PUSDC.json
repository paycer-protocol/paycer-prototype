{
  "address": "0xAaD7328bCC81AC7D8ae9187d7F10B503E3d38Eb8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Shutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "convertFrom18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "convertTo18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWhiteList",
      "outputs": [
        {
          "internalType": "contract IAddressListExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "bits",
          "type": "uint256[]"
        }
      ],
      "name": "multiTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopEverything",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20",
          "type": "address"
        }
      ],
      "name": "sweepErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensHere",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "withdrawByStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7c1b2aa46fbf3d1faad52fc684cdba47473ce9537f588e9c02424b3e1ee3786",
  "receipt": {
    "to": null,
    "from": "0xD2faB04C99Dd67F5c7132eE058158ad4DfA6e613",
    "contractAddress": "0xAaD7328bCC81AC7D8ae9187d7F10B503E3d38Eb8",
    "transactionIndex": 6,
    "gasUsed": "5064198",
    "logsBloom": "0x
    "blockHash": "0x29a427bb016c1c21462a89fe02da676763e350ae724652da3de7d917c7d25a8a",
    "transactionHash": "0xb7c1b2aa46fbf3d1faad52fc684cdba47473ce9537f588e9c02424b3e1ee3786",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 28606998,
        "transactionHash": "0xb7c1b2aa46fbf3d1faad52fc684cdba47473ce9537f588e9c02424b3e1ee3786",
        "address": "0x44b394fCe6133d88B567bA5F2C9A58A4e00937b4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aad7328bcc81ac7d8ae9187d7f10b503e3d38eb8",
          "0x0000000000000000000000002a62975b1dc4f6f8201e15c97e400f51724c8158"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x29a427bb016c1c21462a89fe02da676763e350ae724652da3de7d917c7d25a8a"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 28606998,
        "transactionHash": "0xb7c1b2aa46fbf3d1faad52fc684cdba47473ce9537f588e9c02424b3e1ee3786",
        "address": "0x44b394fCe6133d88B567bA5F2C9A58A4e00937b4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x000000000000000000000000aad7328bcc81ac7d8ae9187d7f10b503e3d38eb8",
          "0x0000000000000000000000002a62975b1dc4f6f8201e15c97e400f51724c8158"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x29a427bb016c1c21462a89fe02da676763e350ae724652da3de7d917c7d25a8a"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 28606998,
        "transactionHash": "0xb7c1b2aa46fbf3d1faad52fc684cdba47473ce9537f588e9c02424b3e1ee3786",
        "address": "0x2A62975b1Dc4f6F8201E15C97E400f51724C8158",
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x000000000000000000000000aad7328bcc81ac7d8ae9187d7f10b503e3d38eb8",
          "0x00000000000000000000000044b394fce6133d88b567ba5f2c9a58a4e00937b4"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x29a427bb016c1c21462a89fe02da676763e350ae724652da3de7d917c7d25a8a"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 28606998,
        "transactionHash": "0xb7c1b2aa46fbf3d1faad52fc684cdba47473ce9537f588e9c02424b3e1ee3786",
        "address": "0x44b394fCe6133d88B567bA5F2C9A58A4e00937b4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x000000000000000000000000cf6bd0eacca6600fb14470dffa3615182258f48b",
          "0x000000000000000000000000aad7328bcc81ac7d8ae9187d7f10b503e3d38eb8"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x29a427bb016c1c21462a89fe02da676763e350ae724652da3de7d917c7d25a8a"
      }
    ],
    "blockNumber": 28606998,
    "cumulativeGasUsed": "5909929",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcF6Bd0eAcCA6600fB14470DFFA3615182258f48B"
  ],
  "solcInputHash": "49587f97439b83e0577b8db069569caf",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"convertTo18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWhiteList\",\"outputs\":[{\"internalType\":\"contract IAddressListExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"bits\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopEverything\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"sweepErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensHere\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdrawByStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"approveToken()\":{\"details\":\"Approve strategy to spend collateral token and strategy token of pool.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"convertFrom18(uint256)\":{\"details\":\"Convert from 18 decimals to token defined decimals.\"},\"convertTo18(uint256)\":{\"details\":\"Convert to 18 decimals from token defined decimals.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"params\":{\"amount\":\"ERC20 token amount.\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"ERC20 token amount.\",\"deadline\":\"The time at which signature will expire\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"feeCollector()\":{\"details\":\"Get fee collector address\"},\"getPricePerShare()\":{\"details\":\"Return value will be in token defined decimals.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"multiTransfer(uint256[])\":{\"details\":\"Left 160 bits are the recipient address and the right 96 bits are the token amount.\",\"params\":{\"bits\":\"array of uint\"},\"returns\":{\"_0\":\"true/false\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\"}},\"rebalance()\":{\"details\":\"Rebalance invested collateral to mitigate liquidation risk, if any. Behavior of rebalance is driven by risk parameters defined in strategy.\"},\"resetApproval()\":{\"details\":\"Reset token approval of strategy. Called when updating strategy.\"},\"sweepErc20(address)\":{\"details\":\"Convert given ERC20 token into collateral token via Uniswap\",\"params\":{\"_erc20\":\"Token address\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"tokenLocked()\":{\"details\":\"Returns collateral token locked in strategy\"},\"tokensHere()\":{\"details\":\"Returns the token stored in the pool. It will be in token defined decimals.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalValue()\":{\"details\":\"Returns total value of vesper pool, in terms of collateral token\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"withdraw(uint256)\":{\"params\":{\"shares\":\"Pool shares. It will be in 18 decimals.\"}},\"withdrawByStrategy(uint256)\":{\"details\":\"No withdraw fee will be assessed when this function is called. Only some white listed address can call this function.\",\"params\":{\"shares\":\"Pool shares. It will be in 18 decimals.\"}},\"withdrawFee()\":{\"details\":\"Format: 1e16 = 1% fee\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256)\":{\"notice\":\"Deposit ERC20 tokens and receive pool shares depending on the current share price.\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit ERC20 tokens with permit aka gasless approval.\"},\"getPricePerShare()\":{\"notice\":\"Get price per share\"},\"multiTransfer(uint256[])\":{\"notice\":\"Transfer tokens to multiple recipient\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spends\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral based on given shares and the current share price. Transfer earned rewards to caller. Withdraw fee, if any, will be deduced from given shares and transferred to feeCollector. Burn remaining shares and return collateral.\"},\"withdrawByStrategy(uint256)\":{\"notice\":\"Withdraw collateral based on given shares and the current share price. Transfer earned rewards to caller. Burn shares and return collateral.\"},\"withdrawFee()\":{\"notice\":\"Get withdraw fee for this pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/PUSDC.sol\":\"PUSDC\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x9486045e189facd2e868ece35249872598ef03f1087fb6fa4d1161842daa2287\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n */\\ncontract Pausable is Context {\\n    event Paused(address account);\\n    event Shutdown(address account);\\n    event Unpaused(address account);\\n    event Open(address account);\\n\\n    bool public paused;\\n    bool public stopEverything;\\n\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n    modifier whenPaused() {\\n        require(paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotShutdown() {\\n        require(!stopEverything, \\\"Pausable: shutdown\\\");\\n        _;\\n    }\\n\\n    modifier whenShutdown() {\\n        require(stopEverything, \\\"Pausable: not shutdown\\\");\\n        _;\\n    }\\n\\n    /// @dev Pause contract operations, if contract is not paused.\\n    function _pause() internal virtual whenNotPaused {\\n        paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\\n    function _unpause() internal virtual whenPaused whenNotShutdown {\\n        paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /// @dev Shutdown contract operations, if not already shutdown.\\n    function _shutdown() internal virtual whenNotShutdown {\\n        stopEverything = true;\\n        paused = true;\\n        emit Shutdown(_msgSender());\\n    }\\n\\n    /// @dev Open contract operations, if contract is in shutdown state\\n    function _open() internal virtual whenShutdown {\\n        stopEverything = false;\\n        emit Open(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x000c693be655543f171076ff349e862756fa894f910721e2c87e08cce4354c55\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x796333072570a67a7ad356ee420a80edf7804268b6a31fcbe7836e3756a1916d\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe26d2ad5341fe167f03bdf9b4d74e1c69ae0980b08fbd83e7041026c5b961185\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IController {\\n    function aaveReferralCode() external view returns (uint16);\\n\\n    function feeCollector(address) external view returns (address);\\n\\n    function founderFee() external view returns (uint256);\\n\\n    function founderVault() external view returns (address);\\n\\n    function interestFee(address) external view returns (uint256);\\n\\n    function isPool(address) external view returns (bool);\\n\\n    function pools() external view returns (address);\\n\\n    function strategy(address) external view returns (address);\\n\\n    function rebalanceFriction(address) external view returns (uint256);\\n\\n    function poolRewards(address) external view returns (address);\\n\\n    function treasuryPool() external view returns (address);\\n\\n    function uniswapRouter() external view returns (address);\\n\\n    function withdrawFee(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e0e894c9edd2e0f954e10c4432d91a76b45fc45d69c3bb5d1eb42fc7e815c3d\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPoolRewards {\\n    function notifyRewardAmount(uint256) external;\\n\\n    function claimReward(address) external;\\n\\n    function updateReward(address) external;\\n\\n    function rewardForDuration() external view returns (uint256);\\n\\n    function claimable(address) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf436b7f6ced7f52564ce0cfae9e4f6e82944c99be34bd9cf8b2aa4be0d4b1f67\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function deposit(uint256 amount) external;\\n\\n    function beforeWithdraw() external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function withdrawAll() external;\\n\\n    function isUpgradable() external view returns (bool);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function totalLocked() external view returns (uint256);\\n\\n    //Lifecycle functions\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xcc18dc44c0440999e8c1d20a03d0c10db03e517a6adb0df655802b1b4770ac41\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function approveToken() external;\\n\\n    function deposit() external payable;\\n\\n    function deposit(uint256) external;\\n\\n    function multiTransfer(uint256[] memory) external returns (bool);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function rebalance() external;\\n\\n    function resetApproval() external;\\n\\n    function sweepErc20(address) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function withdrawETH(uint256) external;\\n\\n    function withdrawByStrategy(uint256) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function getPricePerShare() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd7e6b4863520289099293550577c2423b425a5e6bc8ed35bd808ef3b8a90e5c4\",\"license\":\"MIT\"},\"contracts/pools/PTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./PoolShareToken.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\n\\nabstract contract PTokenBase is PoolShareToken {\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address _token,\\n        address _controller\\n    ) public PoolShareToken(name, symbol, _token, _controller) {\\n        require(_controller != address(0), \\\"Controller address is zero\\\");\\n    }\\n\\n    modifier onlyController() {\\n        require(address(controller) == _msgSender(), \\\"Caller is not the controller\\\");\\n        _;\\n    }\\n\\n    function pause() external onlyController {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyController {\\n        _unpause();\\n    }\\n\\n    function shutdown() external onlyController {\\n        _shutdown();\\n    }\\n\\n    function open() external onlyController {\\n        _open();\\n    }\\n\\n    /// @dev Approve strategy to spend collateral token and strategy token of pool.\\n    function approveToken() external virtual onlyController {\\n        address strategy = controller.strategy(address(this));\\n        token.safeApprove(strategy, MAX_UINT_VALUE);\\n        //IERC20(IStrategy(strategy).token()).safeApprove(strategy, MAX_UINT_VALUE); // DEBUG kovan\\n        //IERC20(0xe22da380ee6B445bb8273C81944ADEB6E8450422).safeApprove(strategy, MAX_UINT_VALUE); // DEBUG kovan\\n    }\\n\\n    /// @dev Reset token approval of strategy. Called when updating strategy.\\n    function resetApproval() external virtual onlyController {\\n        address strategy = controller.strategy(address(this));\\n        token.safeApprove(strategy, 0);\\n        //IERC20(IStrategy(strategy).token()).safeApprove(strategy, 0); // DEBUG kovan\\n    }\\n\\n    /**\\n     * @dev Rebalance invested collateral to mitigate liquidation risk, if any.\\n     * Behavior of rebalance is driven by risk parameters defined in strategy.\\n     */\\n    function rebalance() external virtual {\\n        IStrategy strategy = IStrategy(controller.strategy(address(this)));\\n        strategy.rebalance();\\n    }\\n\\n    /**\\n     * @dev Convert given ERC20 token into collateral token via Uniswap\\n     * @param _erc20 Token address\\n     */\\n    function sweepErc20(address _erc20) external virtual {\\n        _sweepErc20(_erc20);\\n    }\\n\\n    /// @dev Returns collateral token locked in strategy\\n    function tokenLocked() public view virtual returns (uint256) {\\n        IStrategy strategy = IStrategy(controller.strategy(address(this)));\\n        return strategy.totalLocked();\\n    }\\n\\n    /// @dev Returns total value of vesper pool, in terms of collateral token\\n    function totalValue() public view override returns (uint256) {\\n        return tokenLocked().add(tokensHere());\\n    }\\n\\n    /**\\n     * @dev After burning hook, it will be called during withdrawal process.\\n     * It will withdraw collateral from strategy and transfer it to user.\\n     */\\n    function _afterBurning(uint256 _amount) internal override {\\n        uint256 balanceHere = tokensHere();\\n        if (balanceHere < _amount) {\\n            _withdrawCollateral(_amount.sub(balanceHere));\\n            balanceHere = tokensHere();\\n            _amount = balanceHere < _amount ? balanceHere : _amount;\\n        }\\n        token.safeTransfer(_msgSender(), _amount);\\n    }\\n\\n    /**\\n     * @dev Before burning hook.\\n     * Some actions, like resurface(), can impact share price and has to be called before withdraw.\\n     */\\n    function _beforeBurning(\\n        uint256 /* shares */\\n    ) internal override {\\n        IStrategy strategy = IStrategy(controller.strategy(address(this)));\\n        strategy.beforeWithdraw();\\n    }\\n\\n    function _beforeMinting(uint256 amount) internal override {\\n        token.safeTransferFrom(_msgSender(), address(this), amount);\\n    }\\n\\n    function _withdrawCollateral(uint256 amount) internal virtual {\\n        IStrategy strategy = IStrategy(controller.strategy(address(this)));\\n        strategy.withdraw(amount);\\n    }\\n\\n    function _sweepErc20(address _from) internal {\\n        IStrategy strategy = IStrategy(controller.strategy(address(this)));\\n        require(\\n            _from != address(token) && _from != address(this) && !strategy.isReservedToken(_from),\\n            \\\"Not allowed to sweep\\\"\\n        );\\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(controller.uniswapRouter());\\n        uint256 amt = IERC20(_from).balanceOf(address(this));\\n        IERC20(_from).safeApprove(address(uniswapRouter), 0);\\n        IERC20(_from).safeApprove(address(uniswapRouter), amt);\\n        address[] memory path;\\n        if (address(token) == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = address(token);\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = address(token);\\n        }\\n        uniswapRouter.swapExactTokensForTokens(amt, 1, path, address(this), now + 30);\\n    }\\n}\\n\",\"keccak256\":\"0x62998f2de90ea2014816a2bb81b2aeb89a6447c007f97d9549dd1bd88ed11cd3\",\"license\":\"MIT\"},\"contracts/pools/PUSDC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./PTokenBase.sol\\\";\\n\\n//solhint-disable no-empty-blocks\\ncontract PUSDC is PTokenBase {\\n    constructor(address _controller)\\n        public\\n        //PTokenBase(\\\"pUSDC Pool\\\", \\\"pUSDC\\\", 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, _controller) // mainnet\\n        PTokenBase(\\\"pUSDC Pool\\\", \\\"pUSDC\\\", 0xe22da380ee6B445bb8273C81944ADEB6E8450422, _controller) // kovan\\n    {}\\n\\n    /// @dev Convert to 18 decimals from token defined decimals.\\n    function convertTo18(uint256 _value) public pure override returns (uint256) {\\n        return _value.mul(10**12);\\n    }\\n\\n    /// @dev Convert from 18 decimals to token defined decimals.\\n    function convertFrom18(uint256 _value) public pure override returns (uint256) {\\n        return _value.div(10**12);\\n    }\\n}\\n\",\"keccak256\":\"0x7ecd3afd8f65177da1cc5282293393c40a6c9256f7636e445a0011d2e8d7bbec\",\"license\":\"MIT\"},\"contracts/pools/PoolShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../Pausable.sol\\\";\\nimport \\\"../interfaces/vesper/IController.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"../../sol-address-list/contracts/interfaces/IAddressListExt.sol\\\";\\nimport \\\"../../sol-address-list/contracts/interfaces/IAddressListFactory.sol\\\";\\n\\n/// @title Holding pool share token\\n// solhint-disable no-empty-blocks\\nabstract contract PoolShareToken is ERC20, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    IERC20 public immutable token;\\n    IAddressListExt public immutable feeWhiteList;\\n    IController public immutable controller;\\n\\n    /// @dev The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @dev The EIP-712 typehash for the permit struct used by the contract\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    bytes32 public immutable domainSeparator;\\n\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n    mapping(address => uint256) public nonces;\\n    event Deposit(address indexed owner, uint256 shares, uint256 amount);\\n    event Withdraw(address indexed owner, uint256 shares, uint256 amount);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _token,\\n        address _controller\\n    ) public ERC20(_name, _symbol) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        token = IERC20(_token);\\n        controller = IController(_controller);\\n        IAddressListFactory factory =\\n            //IAddressListFactory(0xD57b41649f822C51a73C44Ba0B3da4A880aF0029); // mainnet\\n            IAddressListFactory(0x2A62975b1Dc4f6F8201E15C97E400f51724C8158); // kovan\\n        IAddressListExt _feeWhiteList = IAddressListExt(factory.createList());\\n        _feeWhiteList.grantRole(keccak256(\\\"LIST_ADMIN\\\"), _controller);\\n        feeWhiteList = _feeWhiteList;\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(_name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposit ERC20 tokens and receive pool shares depending on the current share price.\\n     * @param amount ERC20 token amount.\\n     */\\n    function deposit(uint256 amount) external virtual nonReentrant whenNotPaused {\\n        _deposit(amount);\\n    }\\n\\n    /**\\n     * @notice Deposit ERC20 tokens with permit aka gasless approval.\\n     * @param amount ERC20 token amount.\\n     * @param deadline The time at which signature will expire\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual nonReentrant whenNotPaused {\\n        IVesperPool(address(token)).permit(_msgSender(), address(this), amount, deadline, v, r, s);\\n        _deposit(amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral based on given shares and the current share price.\\n     * Transfer earned rewards to caller. Withdraw fee, if any, will be deduced from\\n     * given shares and transferred to feeCollector. Burn remaining shares and return collateral.\\n     * @param shares Pool shares. It will be in 18 decimals.\\n     */\\n    function withdraw(uint256 shares) external virtual nonReentrant whenNotShutdown {\\n        _withdraw(shares);\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral based on given shares and the current share price.\\n     * Transfer earned rewards to caller. Burn shares and return collateral.\\n     * @dev No withdraw fee will be assessed when this function is called.\\n     * Only some white listed address can call this function.\\n     * @param shares Pool shares. It will be in 18 decimals.\\n     */\\n    function withdrawByStrategy(uint256 shares) external virtual nonReentrant whenNotShutdown {\\n        require(feeWhiteList.get(_msgSender()) != 0, \\\"Not a white listed address\\\");\\n        _withdrawByStrategy(shares);\\n    }\\n\\n    /**\\n     * @notice Transfer tokens to multiple recipient\\n     * @dev Left 160 bits are the recipient address and the right 96 bits are the token amount.\\n     * @param bits array of uint\\n     * @return true/false\\n     */\\n    function multiTransfer(uint256[] memory bits) external returns (bool) {\\n        for (uint256 i = 0; i < bits.length; i++) {\\n            address a = address(bits[i] >> 96);\\n            uint256 amount = bits[i] & ((1 << 96) - 1);\\n            require(transfer(a, amount), \\\"Transfer failed\\\");\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spends\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"Expired\\\");\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    domainSeparator,\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_TYPEHASH,\\n                            owner,\\n                            spender,\\n                            amount,\\n                            nonces[owner]++,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0) && signatory == owner, \\\"Invalid signature\\\");\\n        _approve(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Get price per share\\n     * @dev Return value will be in token defined decimals.\\n     */\\n    function getPricePerShare() external view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return convertFrom18(1e18);\\n        }\\n        return totalValue().mul(1e18).div(totalSupply());\\n    }\\n\\n    /// @dev Convert to 18 decimals from token defined decimals. Default no conversion.\\n    function convertTo18(uint256 amount) public pure virtual returns (uint256) {\\n        return amount;\\n    }\\n\\n    /// @dev Convert from 18 decimals to token defined decimals. Default no conversion.\\n    function convertFrom18(uint256 amount) public pure virtual returns (uint256) {\\n        return amount;\\n    }\\n\\n    /// @dev Get fee collector address\\n    function feeCollector() public view virtual returns (address) {\\n        return controller.feeCollector(address(this));\\n    }\\n\\n    /// @dev Returns the token stored in the pool. It will be in token defined decimals.\\n    function tokensHere() public view virtual returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Returns sum of token locked in other contracts and token stored in the pool.\\n     * Default tokensHere. It will be in token defined decimals.\\n     */\\n    function totalValue() public view virtual returns (uint256) {\\n        return tokensHere();\\n    }\\n\\n    /**\\n     * @notice Get withdraw fee for this pool\\n     * @dev Format: 1e16 = 1% fee\\n     */\\n    function withdrawFee() public view virtual returns (uint256) {\\n        return controller.withdrawFee(address(this));\\n    }\\n\\n    /**\\n     * @dev Hook that is called just before burning tokens. To be used i.e. if\\n     * collateral is stored in a different contract and needs to be withdrawn.\\n     * @param share Pool share in 18 decimals\\n     */\\n    function _beforeBurning(uint256 share) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called just after burning tokens. To be used i.e. if\\n     * collateral stored in a different/this contract needs to be transferred.\\n     * @param amount Collateral amount in collateral token defined decimals.\\n     */\\n    function _afterBurning(uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called just before minting new tokens. To be used i.e.\\n     * if the deposited amount is to be transferred from user to this contract.\\n     * @param amount Collateral amount in collateral token defined decimals.\\n     */\\n    function _beforeMinting(uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called just after minting new tokens. To be used i.e.\\n     * if the deposited amount is to be transferred to a different contract.\\n     * @param amount Collateral amount in collateral token defined decimals.\\n     */\\n    function _afterMinting(uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Calculate shares to mint based on the current share price and given amount.\\n     * @param amount Collateral amount in collateral token defined decimals.\\n     */\\n    function _calculateShares(uint256 amount) internal view returns (uint256) {\\n        require(amount != 0, \\\"amount is 0\\\");\\n\\n        uint256 _totalSupply = totalSupply();\\n        uint256 _totalValue = convertTo18(totalValue());\\n        uint256 shares =\\n            (_totalSupply == 0 || _totalValue == 0)\\n                ? amount\\n                : amount.mul(_totalSupply).div(_totalValue);\\n        return shares;\\n    }\\n\\n    /// @dev Deposit incoming token and mint pool token i.e. shares.\\n    function _deposit(uint256 amount) internal {\\n        uint256 shares = _calculateShares(convertTo18(amount));\\n        _beforeMinting(amount);\\n        _mint(_msgSender(), shares);\\n        _afterMinting(amount);\\n        emit Deposit(_msgSender(), shares, amount);\\n    }\\n\\n    /// @dev Handle withdraw fee calculation and fee transfer to fee collector.\\n    function _handleFee(uint256 shares) internal returns (uint256 _sharesAfterFee) {\\n        if (withdrawFee() != 0) {\\n            uint256 _fee = shares.mul(withdrawFee()).div(1e18);\\n            _sharesAfterFee = shares.sub(_fee);\\n            _transfer(_msgSender(), feeCollector(), _fee);\\n        } else {\\n            _sharesAfterFee = shares;\\n        }\\n    }\\n\\n    /// @dev Update pool reward of sender and receiver before transfer.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 /* amount */\\n    ) internal virtual override {\\n        address poolRewards = controller.poolRewards(address(this));\\n        if (poolRewards != address(0)) {\\n            if (from != address(0)) {\\n                IPoolRewards(poolRewards).updateReward(from);\\n            }\\n            if (to != address(0)) {\\n                IPoolRewards(poolRewards).updateReward(to);\\n            }\\n        }\\n    }\\n\\n    /// @dev Burns shares and returns the collateral value, after fee, of those.\\n    function _withdraw(uint256 shares) internal {\\n        require(shares != 0, \\\"share is 0\\\");\\n        _beforeBurning(shares);\\n        uint256 sharesAfterFee = _handleFee(shares);\\n        uint256 amount =\\n            convertFrom18(sharesAfterFee.mul(convertTo18(totalValue())).div(totalSupply()));\\n\\n        _burn(_msgSender(), sharesAfterFee);\\n        _afterBurning(amount);\\n        emit Withdraw(_msgSender(), shares, amount);\\n    }\\n\\n    /// @dev Burns shares and returns the collateral value of those.\\n    function _withdrawByStrategy(uint256 shares) internal {\\n        require(shares != 0, \\\"Withdraw must be greater than 0\\\");\\n        _beforeBurning(shares);\\n        uint256 amount = convertFrom18(shares.mul(convertTo18(totalValue())).div(totalSupply()));\\n        _burn(_msgSender(), shares);\\n        _afterBurning(amount);\\n        emit Withdraw(_msgSender(), shares, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9012991ea60249c37296c391a787e9260ebb04e8f96782c44da4b0caa59d4c7a\",\"license\":\"MIT\"},\"sol-address-list/contracts/interfaces/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\ninterface IAddressList {\\n    event AddressUpdated(address indexed a, address indexed sender);\\n    event AddressRemoved(address indexed a, address indexed sender);\\n\\n    function add(address a) external returns (bool);\\n\\n    function addValue(address a, uint256 v) external returns (bool);\\n\\n    function addMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values) external returns (uint256);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function removeMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function length() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa0565d70a23098bfc657a785ff308775bc858843be9bb45f75616d9cb03d43a1\",\"license\":\"MIT\"},\"sol-address-list/contracts/interfaces/IAddressListExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\nimport \\\"./IAddressList.sol\\\";\\n\\ninterface IAddressListExt is IAddressList {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x4433c06590d8a1b8559cda7f60e67d9ae621a99490bcbf1936c70afeabf954b5\",\"license\":\"MIT\"},\"sol-address-list/contracts/interfaces/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\ninterface IAddressListFactory {\\n    event ListCreated(address indexed _sender, address indexed _newList);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0xd8a8c8f165891fada8711964a0de5d525b3ab62c37d6dde4108e90361bf4cc7c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162003e2138038062003e21833981810160405260208110156200003857600080fd5b5051604080518082018252600a8152691c1554d110c8141bdbdb60b21b602082810191825283518085019094526005845264705553444360d81b90840152815191929173e22da380ee6b445bb8273c81944adeb6e8450422918591859185918591859185918591620000ad916003916200031f565b508051620000c39060049060208401906200031f565b50506005805460ff191660121790555060016006556001600160601b0319606083811b821660805282901b1660c05260408051630fab4d2560e01b815290514691732a62975b1dc4f6f8201e15c97e400f51724c8158916000918391630fab4d259160048082019260209290919082900301818787803b1580156200014757600080fd5b505af11580156200015c573d6000803e3d6000fd5b505050506040513d60208110156200017357600080fd5b505160408051632f2ff15d60e01b81527f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a660048201526001600160a01b038781166024830152915192935090831691632f2ff15d9160448082019260009290919082900301818387803b158015620001ea57600080fd5b505af1158015620001ff573d6000803e3d6000fd5b50505050606090811b6001600160601b03191660a0908152875160209889012060408051808201825260018152603160f81b908b015280517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818c0152808201929092527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc693820193909352608081019490945230848201528151808503909101815260c0909301905250805194019390932060e0525050506001600160a01b03811662000314576040805162461bcd60e51b815260206004820152601a60248201527f436f6e74726f6c6c65722061646472657373206973207a65726f000000000000604482015290519081900360640190fd5b5050505050620003bb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200036257805160ff191683800117855562000392565b8280016001018555821562000392579182015b828111156200039257825182559160200191906001019062000375565b50620003a0929150620003a4565b5090565b5b80821115620003a05760008155600101620003a5565b60805160601c60a05160601c60c05160601c60e0516139966200048b600039806118b15280611a95525080610a255280610aa35280610c2b5280610e6b5280610f9b52806110b7528061135752806113d5528061172e5280611a285280611add5280611b475280611bdc5280612567528061271d5280612cbb5280612e5b528061340752508061124c5280611ab9525080610b495280610d6d528061147b528061168e5280611b125280612602528061284752806128da52806129be52806130ff528061328e52506139966000f3fe608060405234801561001057600080fd5b50600436106102de5760003560e01c806397a5af5511610186578063d505accf116100e3578063f6ecd3d511610097578063fc0c546a11610071578063fc0c546a146107a5578063fc0e74d1146107ad578063fcfff16f146107b5576102de565b8063f6ecd3d514610778578063f77c479114610780578063fb589de214610788576102de565b8063dd62ed3e116100c8578063dd62ed3e1461073a578063e941fa7814610768578063f698da2514610770576102de565b8063d505accf146106c3578063d9fe3eae14610714576102de565b8063b6b55f251161013a578063c415b95c1161011f578063c415b95c1461067a578063ce27b9031461069e578063d4c3eea0146106bb576102de565b8063b6b55f2514610655578063b8cb343d14610672576102de565b8063a457c2d71161016b578063a457c2d71461055a578063a9059cbb14610586578063b33fcc7a146105b2576102de565b806397a5af551461053557806399b71d5c14610552576102de565b80633d68175c1161023f5780636a630559116101f35780637ecebe00116101cd5780637ecebe00146104ff5780638456cb591461052557806395d89b411461052d576102de565b80636a630559146104c957806370a08231146104d15780637d7c2a1c146104f7576102de565b80634938649a116102245780634938649a146104815780634a970be7146104895780635c975abb146104c1576102de565b80633d68175c146104715780633f4ba83a14610479576102de565b80632e1a7d4d11610296578063313ce5671161027b578063313ce5671461041f578063330b8b711461043d5780633950935114610445576102de565b80632e1a7d4d146103f857806330adf81f14610417576102de565b806318160ddd116102c757806318160ddd146103a057806320606b70146103ba57806323b872dd146103c2576102de565b806306fdde03146102e3578063095ea7b314610360575b600080fd5b6102eb6107bd565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032557818101518382015260200161030d565b50505050905090810190601f1680156103525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61038c6004803603604081101561037657600080fd5b506001600160a01b038135169060200135610854565b604080519115158252519081900360200190f35b6103a8610872565b60408051918252519081900360200190f35b6103a8610878565b61038c600480360360608110156103d857600080fd5b506001600160a01b0381358116916020810135909116906040013561089c565b6104156004803603602081101561040e57600080fd5b5035610924565b005b6103a86109e5565b610427610a09565b6040805160ff9092168252519081900360200190f35b610415610a12565b61038c6004803603604081101561045b57600080fd5b506001600160a01b038135169060200135610b74565b6103a8610bc2565b610415610c18565b61038c610caf565b610415600480360360a081101561049f57600080fd5b5080359060208101359060ff6040820135169060608101359060800135610cbe565b61038c610e58565b6103a8610e66565b6103a8600480360360208110156104e757600080fd5b50356001600160a01b0316610f78565b610415610f97565b6103a86004803603602081101561051557600080fd5b50356001600160a01b0316611092565b6104156110a4565b6102eb611139565b6104156004803603602081101561054b57600080fd5b503561119a565b610415611344565b61038c6004803603604081101561057057600080fd5b506001600160a01b0381351690602001356114a4565b61038c6004803603604081101561059c57600080fd5b506001600160a01b03813516906020013561150c565b61038c600480360360208110156105c857600080fd5b8101906020810181356401000000008111156105e357600080fd5b8201836020820111156105f557600080fd5b8035906020019184602083028401116401000000008311171561061757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611520945050505050565b6104156004803603602081101561066b57600080fd5b50356115d4565b6103a861168a565b61068261172a565b604080516001600160a01b039092168252519081900360200190f35b6103a8600480360360208110156106b457600080fd5b5035611799565b6103a86117aa565b610415600480360360e08110156106d957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356117c5565b6104156004803603602081101561072a57600080fd5b50356001600160a01b03166119f0565b6103a86004803603604081101561075057600080fd5b506001600160a01b03813581169160200135166119f9565b6103a8611a24565b6103a8611a93565b610682611ab7565b610682611adb565b6103a86004803603602081101561079e57600080fd5b5035611aff565b610682611b10565b610415611b34565b610415611bc9565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108495780601f1061081e57610100808354040283529160200191610849565b820191906000526020600020905b81548152906001019060200180831161082c57829003601f168201915b505050505090505b90565b6000610868610861611c5e565b8484611c62565b5060015b92915050565b60025490565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b60006108a9848484611d4e565b610919846108b5611c5e565b6109148560405180606001604052806028815260200161384a602891396001600160a01b038a166000908152600160205260408120906108f3611c5e565b6001600160a01b031681526020810191909152604001600020549190611ea9565b611c62565b5060015b9392505050565b6002600654141561097c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260065560055462010000900460ff16156109d4576040805162461bcd60e51b81526020600482015260126024820152712830bab9b0b136329d1039b43aba3237bbb760711b604482015290519081900360640190fd5b6109dd81611f40565b506001600655565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60055460ff1690565b610a1a611c5e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610a9f576040805162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c657200000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b0e57600080fd5b505afa158015610b22573d6000803e3d6000fd5b505050506040513d6020811015610b3857600080fd5b50519050610b716001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016826000612048565b50565b6000610868610b81611c5e565b846109148560016000610b92611c5e565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490612160565b6000610bcc610872565b610be857610be1670de0b6b3a7640000611aff565b9050610851565b610c13610bf3610872565b610c0d670de0b6b3a7640000610c076117aa565b906121ba565b90612213565b905090565b610c20611c5e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ca5576040805162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c657200000000604482015290519081900360640190fd5b610cad61227a565b565b60055462010000900460ff1681565b60026006541415610d16576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600655600554610100900460ff1615610d6b576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d505accf610da2611c5e565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152306024830152604482018990526064820188905260ff8716608483015260a4820186905260c482018590525160e480830192600092919082900301818387803b158015610e2b57600080fd5b505af1158015610e3f573d6000803e3d6000fd5b50505050610e4c8561237a565b50506001600655505050565b600554610100900460ff1681565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ed657600080fd5b505afa158015610eea573d6000803e3d6000fd5b505050506040513d6020811015610f0057600080fd5b505160408051632b448a0960e11b815290519192506001600160a01b03831691635689141291600480820192602092909190829003018186803b158015610f4657600080fd5b505afa158015610f5a573d6000803e3d6000fd5b505050506040513d6020811015610f7057600080fd5b505191505090565b6001600160a01b0381166000908152602081905260409020545b919050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561100657600080fd5b505afa15801561101a573d6000803e3d6000fd5b505050506040513d602081101561103057600080fd5b505160408051631f5f0a8760e21b815290519192506001600160a01b03831691637d7c2a1c9160048082019260009290919082900301818387803b15801561107757600080fd5b505af115801561108b573d6000803e3d6000fd5b5050505050565b60076020526000908152604090205481565b6110ac611c5e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611131576040805162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c657200000000604482015290519081900360640190fd5b610cad612406565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108495780601f1061081e57610100808354040283529160200191610849565b600260065414156111f2576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260065560055462010000900460ff161561124a576040805162461bcd60e51b81526020600482015260126024820152712830bab9b0b136329d1039b43aba3237bbb760711b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2bc2efc611281611c5e565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156112be57600080fd5b505afa1580156112d2573d6000803e3d6000fd5b505050506040513d60208110156112e857600080fd5b505161133b576040805162461bcd60e51b815260206004820152601a60248201527f4e6f742061207768697465206c69737465642061646472657373000000000000604482015290519081900360640190fd5b6109dd8161248e565b61134c611c5e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146113d1576040805162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c657200000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561144057600080fd5b505afa158015611454573d6000803e3d6000fd5b505050506040513d602081101561146a57600080fd5b50519050610b716001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682600019612048565b60006108686114b1611c5e565b846109148560405180606001604052806025815260200161393c60259139600160006114db611c5e565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611ea9565b6000610868611519611c5e565b8484611d4e565b6000805b8251811015610868576000606084838151811061153d57fe5b6020026020010151901c9050600084838151811061155757fe5b60200260200101516bffffffffffffffffffffffff169050611579828261150c565b6115ca576040805162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b5050600101611524565b6002600654141561162c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600655600554610100900460ff1615611681576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6109dd8161237a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116f957600080fd5b505afa15801561170d573d6000803e3d6000fd5b505050506040513d602081101561172357600080fd5b5051905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a06e01ba306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116f957600080fd5b600061086c8264e8d4a510006121ba565b6000610c136117b761168a565b6117bf610e66565b90612160565b4284101561181a576040805162461bcd60e51b815260206004820152600760248201527f4578706972656400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380881660008181526007602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958c166060860152608085018b905260a085019590955260c08085018a90528151808603909101815260e08501825280519083012061190160f01b6101008601527f00000000000000000000000000000000000000000000000000000000000000006101028601526101228086019190915281518086039091018152610142850180835281519184019190912090849052610162850180835281905260ff89166101828601526101a285018890526101c285018790529051909492936101e28082019392601f1981019281900390910190855afa158015611953573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906119895750886001600160a01b0316816001600160a01b0316145b6119da576040805162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b6119e5898989611c62565b505050505050505050565b610b7181612563565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631ac3ddeb306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116f957600080fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061086c8264e8d4a51000612213565b7f000000000000000000000000000000000000000000000000000000000000000081565b611b3c611c5e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611bc1576040805162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c657200000000604482015290519081900360640190fd5b610cad612b8d565b611bd1611c5e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611c56576040805162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c657200000000604482015290519081900360640190fd5b610cad612c25565b3390565b6001600160a01b038316611ca75760405162461bcd60e51b81526004018080602001828103825260248152602001806138b86024913960400191505060405180910390fd5b6001600160a01b038216611cec5760405162461bcd60e51b81526004018080602001828103825260228152602001806137bb6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316611d935760405162461bcd60e51b81526004018080602001828103825260258152602001806138936025913960400191505060405180910390fd5b6001600160a01b038216611dd85760405162461bcd60e51b81526004018080602001828103825260238152602001806137766023913960400191505060405180910390fd5b611de3838383612cb7565b611e20816040518060600160405280602681526020016137dd602691396001600160a01b0386166000908152602081905260409020549190611ea9565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611e4f9082612160565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115611f385760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611efd578181015183820152602001611ee5565b50505050905090810190601f168015611f2a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b80611f92576040805162461bcd60e51b815260206004820152600a60248201527f7368617265206973203000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611f9b81612e57565b6000611fa682612f53565b90506000611fd7611fd2611fb8610872565b610c0d611fcb611fc66117aa565b611799565b86906121ba565b611aff565b9050611fea611fe4611c5e565b83612fac565b611ff3816130a8565b611ffb611c5e565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688483604051808381526020018281526020019250505060405180910390a2505050565b8015806120ce575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156120a057600080fd5b505afa1580156120b4573d6000803e3d6000fd5b505050506040513d60208110156120ca57600080fd5b5051155b6121095760405162461bcd60e51b81526004018080602001828103825260368152602001806139066036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261215b90849061312a565b505050565b60008282018381101561091d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826121c95750600061086c565b828202828482816121d657fe5b041461091d5760405162461bcd60e51b81526004018080602001828103825260218152602001806138296021913960400191505060405180910390fd5b6000808211612269576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161227257fe5b049392505050565b600554610100900460ff166122d6576040805162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b60055462010000900460ff1615612329576040805162461bcd60e51b81526020600482015260126024820152712830bab9b0b136329d1039b43aba3237bbb760711b604482015290519081900360640190fd5b6005805461ff00191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61235d611c5e565b604080516001600160a01b039092168252519081900360200190a1565b600061238d61238883611799565b6131db565b905061239882613279565b6123a96123a3611c5e565b826132b6565b6123b282610b71565b6123ba611c5e565b6001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158284604051808381526020018281526020019250505060405180910390a25050565b600554610100900460ff1615612456576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6005805461ff0019166101001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861235d611c5e565b806124e0576040805162461bcd60e51b815260206004820152601f60248201527f5769746864726177206d7573742062652067726561746572207468616e203000604482015290519081900360640190fd5b6124e981612e57565b60006124f9611fd2611fb8610872565b9050612506611fe4611c5e565b61250f816130a8565b612517611c5e565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688383604051808381526020018281526020019250505060405180910390a25050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156125d257600080fd5b505afa1580156125e6573d6000803e3d6000fd5b505050506040513d60208110156125fc57600080fd5b505190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169083161480159061264657506001600160a01b0382163014155b80156126c85750806001600160a01b031663440d7248836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561269a57600080fd5b505afa1580156126ae573d6000803e3d6000fd5b505050506040513d60208110156126c457600080fd5b5051155b612719576040805162461bcd60e51b815260206004820152601460248201527f4e6f7420616c6c6f77656420746f207377656570000000000000000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561277457600080fd5b505afa158015612788573d6000803e3d6000fd5b505050506040513d602081101561279e57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038616916370a08231916024808301926020929190829003018186803b1580156127ec57600080fd5b505afa158015612800573d6000803e3d6000fd5b505050506040513d602081101561281657600080fd5b5051905061282f6001600160a01b038516836000612048565b6128436001600160a01b0385168383612048565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2141561292b57604080516002808252606082018352909160208301908036833701905050905084816000815181106128b857fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061290657fe5b60200260200101906001600160a01b031690816001600160a01b031681525050612a0b565b604080516003808252608082019092529060208201606080368337019050509050848160008151811061295a57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061299c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816002815181106129ea57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b826001600160a01b03166338ed1739836001843042601e016040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612a93578181015183820152602001612a7b565b505050509050019650505050505050600060405180830381600087803b158015612abc57600080fd5b505af1158015612ad0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612af957600080fd5b8101908080516040519392919084640100000000821115612b1957600080fd5b908301906020820185811115612b2e57600080fd5b8251866020820283011164010000000082111715612b4b57600080fd5b82525081516020918201928201910280838360005b83811015612b78578181015183820152602001612b60565b50505050905001604052505050505050505050565b60055462010000900460ff1615612be0576040805162461bcd60e51b81526020600482015260126024820152712830bab9b0b136329d1039b43aba3237bbb760711b604482015290519081900360640190fd5b6005805461ff001962ff0000199091166201000017166101001790557f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a61235d611c5e565b60055462010000900460ff16612c82576040805162461bcd60e51b815260206004820152601660248201527f5061757361626c653a206e6f742073687574646f776e00000000000000000000604482015290519081900360640190fd5b6005805462ff0000191690557fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc61235d611c5e565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dd5aba4b306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612d2657600080fd5b505afa158015612d3a573d6000803e3d6000fd5b505050506040513d6020811015612d5057600080fd5b505190506001600160a01b03811615612e51576001600160a01b03841615612dda57806001600160a01b031663632447c9856040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015612dc157600080fd5b505af1158015612dd5573d6000803e3d6000fd5b505050505b6001600160a01b03831615612e5157806001600160a01b031663632447c9846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015612e3857600080fd5b505af1158015612e4c573d6000803e3d6000fd5b505050505b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ec657600080fd5b505afa158015612eda573d6000803e3d6000fd5b505050506040513d6020811015612ef057600080fd5b50516040805163419f775360e01b815290519192506001600160a01b0383169163419f77539160048082019260009290919082900301818387803b158015612f3757600080fd5b505af1158015612f4b573d6000803e3d6000fd5b505050505050565b6000612f5d611a24565b15612fa8576000612f7b670de0b6b3a7640000610c0d611fcb611a24565b9050612f8783826133a6565b9150612fa2612f94611c5e565b612f9c61172a565b83611d4e565b50610f92565b5090565b6001600160a01b038216612ff15760405162461bcd60e51b81526004018080602001828103825260218152602001806138726021913960400191505060405180910390fd5b612ffd82600083612cb7565b61303a81604051806060016040528060228152602001613799602291396001600160a01b0385166000908152602081905260409020549190611ea9565b6001600160a01b03831660009081526020819052604090205560025461306090826133a6565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60006130b261168a565b9050818110156130ea576130ce6130c983836133a6565b613403565b6130d661168a565b90508181106130e557816130e7565b805b91505b6131266130f5611c5e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690846134ea565b5050565b606061317f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661353c9092919063ffffffff16565b80519091501561215b5780806020019051602081101561319e57600080fd5b505161215b5760405162461bcd60e51b815260040180806020018281038252602a8152602001806138dc602a913960400191505060405180910390fd5b60008161322f576040805162461bcd60e51b815260206004820152600b60248201527f616d6f756e742069732030000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000613239610872565b90506000613248611fc66117aa565b90506000821580613257575081155b61326e5761326982610c0d87866121ba565b613270565b845b95945050505050565b610b71613284611c5e565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903084613553565b6001600160a01b038216613311576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61331d60008383612cb7565b60025461332a9082612160565b6002556001600160a01b0382166000908152602081905260409020546133509082612160565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828211156133fd576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561347257600080fd5b505afa158015613486573d6000803e3d6000fd5b505050506040513d602081101561349c57600080fd5b505160408051632e1a7d4d60e01b81526004810185905290519192506001600160a01b03831691632e1a7d4d9160248082019260009290919082900301818387803b158015612f3757600080fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261215b90849061312a565b606061354b84846000856135ad565b949350505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612e5190859061312a565b6060824710156135ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806138036026913960400191505060405180910390fd5b6135f785613709565b613648576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106136875780518252601f199092019160209182019101613668565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146136e9576040519150601f19603f3d011682016040523d82523d6000602084013e6136ee565b606091505b50915091506136fe82828661370f565b979650505050505050565b3b151590565b6060831561371e57508161091d565b82511561372e5782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611efd578181015183820152602001611ee556fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220c843ac527a297a26c704a6ff51bac83c3603e01733ca909c8d002af12491aa9f64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102de5760003560e01c806397a5af5511610186578063d505accf116100e3578063f6ecd3d511610097578063fc0c546a11610071578063fc0c546a146107a5578063fc0e74d1146107ad578063fcfff16f146107b5576102de565b8063f6ecd3d514610778578063f77c479114610780578063fb589de214610788576102de565b8063dd62ed3e116100c8578063dd62ed3e1461073a578063e941fa7814610768578063f698da2514610770576102de565b8063d505accf146106c3578063d9fe3eae14610714576102de565b8063b6b55f251161013a578063c415b95c1161011f578063c415b95c1461067a578063ce27b9031461069e578063d4c3eea0146106bb576102de565b8063b6b55f2514610655578063b8cb343d14610672576102de565b8063a457c2d71161016b578063a457c2d71461055a578063a9059cbb14610586578063b33fcc7a146105b2576102de565b806397a5af551461053557806399b71d5c14610552576102de565b80633d68175c1161023f5780636a630559116101f35780637ecebe00116101cd5780637ecebe00146104ff5780638456cb591461052557806395d89b411461052d576102de565b80636a630559146104c957806370a08231146104d15780637d7c2a1c146104f7576102de565b80634938649a116102245780634938649a146104815780634a970be7146104895780635c975abb146104c1576102de565b80633d68175c146104715780633f4ba83a14610479576102de565b80632e1a7d4d11610296578063313ce5671161027b578063313ce5671461041f578063330b8b711461043d5780633950935114610445576102de565b80632e1a7d4d146103f857806330adf81f14610417576102de565b806318160ddd116102c757806318160ddd146103a057806320606b70146103ba57806323b872dd146103c2576102de565b806306fdde03146102e3578063095ea7b314610360575b600080fd5b6102eb6107bd565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032557818101518382015260200161030d565b50505050905090810190601f1680156103525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61038c6004803603604081101561037657600080fd5b506001600160a01b038135169060200135610854565b604080519115158252519081900360200190f35b6103a8610872565b60408051918252519081900360200190f35b6103a8610878565b61038c600480360360608110156103d857600080fd5b506001600160a01b0381358116916020810135909116906040013561089c565b6104156004803603602081101561040e57600080fd5b5035610924565b005b6103a86109e5565b610427610a09565b6040805160ff9092168252519081900360200190f35b610415610a12565b61038c6004803603604081101561045b57600080fd5b506001600160a01b038135169060200135610b74565b6103a8610bc2565b610415610c18565b61038c610caf565b610415600480360360a081101561049f57600080fd5b5080359060208101359060ff6040820135169060608101359060800135610cbe565b61038c610e58565b6103a8610e66565b6103a8600480360360208110156104e757600080fd5b50356001600160a01b0316610f78565b610415610f97565b6103a86004803603602081101561051557600080fd5b50356001600160a01b0316611092565b6104156110a4565b6102eb611139565b6104156004803603602081101561054b57600080fd5b503561119a565b610415611344565b61038c6004803603604081101561057057600080fd5b506001600160a01b0381351690602001356114a4565b61038c6004803603604081101561059c57600080fd5b506001600160a01b03813516906020013561150c565b61038c600480360360208110156105c857600080fd5b8101906020810181356401000000008111156105e357600080fd5b8201836020820111156105f557600080fd5b8035906020019184602083028401116401000000008311171561061757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611520945050505050565b6104156004803603602081101561066b57600080fd5b50356115d4565b6103a861168a565b61068261172a565b604080516001600160a01b039092168252519081900360200190f35b6103a8600480360360208110156106b457600080fd5b5035611799565b6103a86117aa565b610415600480360360e08110156106d957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356117c5565b6104156004803603602081101561072a57600080fd5b50356001600160a01b03166119f0565b6103a86004803603604081101561075057600080fd5b506001600160a01b03813581169160200135166119f9565b6103a8611a24565b6103a8611a93565b610682611ab7565b610682611adb565b6103a86004803603602081101561079e57600080fd5b5035611aff565b610682611b10565b610415611b34565b610415611bc9565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108495780601f1061081e57610100808354040283529160200191610849565b820191906000526020600020905b81548152906001019060200180831161082c57829003601f168201915b505050505090505b90565b6000610868610861611c5e565b8484611c62565b5060015b92915050565b60025490565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b60006108a9848484611d4e565b610919846108b5611c5e565b6109148560405180606001604052806028815260200161384a602891396001600160a01b038a166000908152600160205260408120906108f3611c5e565b6001600160a01b031681526020810191909152604001600020549190611ea9565b611c62565b5060015b9392505050565b6002600654141561097c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260065560055462010000900460ff16156109d4576040805162461bcd60e51b81526020600482015260126024820152712830bab9b0b136329d1039b43aba3237bbb760711b604482015290519081900360640190fd5b6109dd81611f40565b506001600655565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60055460ff1690565b610a1a611c5e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610a9f576040805162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c657200000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b0e57600080fd5b505afa158015610b22573d6000803e3d6000fd5b505050506040513d6020811015610b3857600080fd5b50519050610b716001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016826000612048565b50565b6000610868610b81611c5e565b846109148560016000610b92611c5e565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490612160565b6000610bcc610872565b610be857610be1670de0b6b3a7640000611aff565b9050610851565b610c13610bf3610872565b610c0d670de0b6b3a7640000610c076117aa565b906121ba565b90612213565b905090565b610c20611c5e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ca5576040805162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c657200000000604482015290519081900360640190fd5b610cad61227a565b565b60055462010000900460ff1681565b60026006541415610d16576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600655600554610100900460ff1615610d6b576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d505accf610da2611c5e565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152306024830152604482018990526064820188905260ff8716608483015260a4820186905260c482018590525160e480830192600092919082900301818387803b158015610e2b57600080fd5b505af1158015610e3f573d6000803e3d6000fd5b50505050610e4c8561237a565b50506001600655505050565b600554610100900460ff1681565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ed657600080fd5b505afa158015610eea573d6000803e3d6000fd5b505050506040513d6020811015610f0057600080fd5b505160408051632b448a0960e11b815290519192506001600160a01b03831691635689141291600480820192602092909190829003018186803b158015610f4657600080fd5b505afa158015610f5a573d6000803e3d6000fd5b505050506040513d6020811015610f7057600080fd5b505191505090565b6001600160a01b0381166000908152602081905260409020545b919050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561100657600080fd5b505afa15801561101a573d6000803e3d6000fd5b505050506040513d602081101561103057600080fd5b505160408051631f5f0a8760e21b815290519192506001600160a01b03831691637d7c2a1c9160048082019260009290919082900301818387803b15801561107757600080fd5b505af115801561108b573d6000803e3d6000fd5b5050505050565b60076020526000908152604090205481565b6110ac611c5e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611131576040805162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c657200000000604482015290519081900360640190fd5b610cad612406565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108495780601f1061081e57610100808354040283529160200191610849565b600260065414156111f2576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260065560055462010000900460ff161561124a576040805162461bcd60e51b81526020600482015260126024820152712830bab9b0b136329d1039b43aba3237bbb760711b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2bc2efc611281611c5e565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156112be57600080fd5b505afa1580156112d2573d6000803e3d6000fd5b505050506040513d60208110156112e857600080fd5b505161133b576040805162461bcd60e51b815260206004820152601a60248201527f4e6f742061207768697465206c69737465642061646472657373000000000000604482015290519081900360640190fd5b6109dd8161248e565b61134c611c5e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146113d1576040805162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c657200000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561144057600080fd5b505afa158015611454573d6000803e3d6000fd5b505050506040513d602081101561146a57600080fd5b50519050610b716001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682600019612048565b60006108686114b1611c5e565b846109148560405180606001604052806025815260200161393c60259139600160006114db611c5e565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611ea9565b6000610868611519611c5e565b8484611d4e565b6000805b8251811015610868576000606084838151811061153d57fe5b6020026020010151901c9050600084838151811061155757fe5b60200260200101516bffffffffffffffffffffffff169050611579828261150c565b6115ca576040805162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b5050600101611524565b6002600654141561162c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600655600554610100900460ff1615611681576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6109dd8161237a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116f957600080fd5b505afa15801561170d573d6000803e3d6000fd5b505050506040513d602081101561172357600080fd5b5051905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a06e01ba306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116f957600080fd5b600061086c8264e8d4a510006121ba565b6000610c136117b761168a565b6117bf610e66565b90612160565b4284101561181a576040805162461bcd60e51b815260206004820152600760248201527f4578706972656400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380881660008181526007602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958c166060860152608085018b905260a085019590955260c08085018a90528151808603909101815260e08501825280519083012061190160f01b6101008601527f00000000000000000000000000000000000000000000000000000000000000006101028601526101228086019190915281518086039091018152610142850180835281519184019190912090849052610162850180835281905260ff89166101828601526101a285018890526101c285018790529051909492936101e28082019392601f1981019281900390910190855afa158015611953573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906119895750886001600160a01b0316816001600160a01b0316145b6119da576040805162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b6119e5898989611c62565b505050505050505050565b610b7181612563565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631ac3ddeb306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116f957600080fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061086c8264e8d4a51000612213565b7f000000000000000000000000000000000000000000000000000000000000000081565b611b3c611c5e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611bc1576040805162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c657200000000604482015290519081900360640190fd5b610cad612b8d565b611bd1611c5e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611c56576040805162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c657200000000604482015290519081900360640190fd5b610cad612c25565b3390565b6001600160a01b038316611ca75760405162461bcd60e51b81526004018080602001828103825260248152602001806138b86024913960400191505060405180910390fd5b6001600160a01b038216611cec5760405162461bcd60e51b81526004018080602001828103825260228152602001806137bb6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316611d935760405162461bcd60e51b81526004018080602001828103825260258152602001806138936025913960400191505060405180910390fd5b6001600160a01b038216611dd85760405162461bcd60e51b81526004018080602001828103825260238152602001806137766023913960400191505060405180910390fd5b611de3838383612cb7565b611e20816040518060600160405280602681526020016137dd602691396001600160a01b0386166000908152602081905260409020549190611ea9565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611e4f9082612160565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115611f385760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611efd578181015183820152602001611ee5565b50505050905090810190601f168015611f2a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b80611f92576040805162461bcd60e51b815260206004820152600a60248201527f7368617265206973203000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611f9b81612e57565b6000611fa682612f53565b90506000611fd7611fd2611fb8610872565b610c0d611fcb611fc66117aa565b611799565b86906121ba565b611aff565b9050611fea611fe4611c5e565b83612fac565b611ff3816130a8565b611ffb611c5e565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688483604051808381526020018281526020019250505060405180910390a2505050565b8015806120ce575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156120a057600080fd5b505afa1580156120b4573d6000803e3d6000fd5b505050506040513d60208110156120ca57600080fd5b5051155b6121095760405162461bcd60e51b81526004018080602001828103825260368152602001806139066036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261215b90849061312a565b505050565b60008282018381101561091d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826121c95750600061086c565b828202828482816121d657fe5b041461091d5760405162461bcd60e51b81526004018080602001828103825260218152602001806138296021913960400191505060405180910390fd5b6000808211612269576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161227257fe5b049392505050565b600554610100900460ff166122d6576040805162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b60055462010000900460ff1615612329576040805162461bcd60e51b81526020600482015260126024820152712830bab9b0b136329d1039b43aba3237bbb760711b604482015290519081900360640190fd5b6005805461ff00191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61235d611c5e565b604080516001600160a01b039092168252519081900360200190a1565b600061238d61238883611799565b6131db565b905061239882613279565b6123a96123a3611c5e565b826132b6565b6123b282610b71565b6123ba611c5e565b6001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158284604051808381526020018281526020019250505060405180910390a25050565b600554610100900460ff1615612456576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6005805461ff0019166101001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861235d611c5e565b806124e0576040805162461bcd60e51b815260206004820152601f60248201527f5769746864726177206d7573742062652067726561746572207468616e203000604482015290519081900360640190fd5b6124e981612e57565b60006124f9611fd2611fb8610872565b9050612506611fe4611c5e565b61250f816130a8565b612517611c5e565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688383604051808381526020018281526020019250505060405180910390a25050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156125d257600080fd5b505afa1580156125e6573d6000803e3d6000fd5b505050506040513d60208110156125fc57600080fd5b505190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169083161480159061264657506001600160a01b0382163014155b80156126c85750806001600160a01b031663440d7248836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561269a57600080fd5b505afa1580156126ae573d6000803e3d6000fd5b505050506040513d60208110156126c457600080fd5b5051155b612719576040805162461bcd60e51b815260206004820152601460248201527f4e6f7420616c6c6f77656420746f207377656570000000000000000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561277457600080fd5b505afa158015612788573d6000803e3d6000fd5b505050506040513d602081101561279e57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038616916370a08231916024808301926020929190829003018186803b1580156127ec57600080fd5b505afa158015612800573d6000803e3d6000fd5b505050506040513d602081101561281657600080fd5b5051905061282f6001600160a01b038516836000612048565b6128436001600160a01b0385168383612048565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2141561292b57604080516002808252606082018352909160208301908036833701905050905084816000815181106128b857fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061290657fe5b60200260200101906001600160a01b031690816001600160a01b031681525050612a0b565b604080516003808252608082019092529060208201606080368337019050509050848160008151811061295a57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061299c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816002815181106129ea57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b826001600160a01b03166338ed1739836001843042601e016040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612a93578181015183820152602001612a7b565b505050509050019650505050505050600060405180830381600087803b158015612abc57600080fd5b505af1158015612ad0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612af957600080fd5b8101908080516040519392919084640100000000821115612b1957600080fd5b908301906020820185811115612b2e57600080fd5b8251866020820283011164010000000082111715612b4b57600080fd5b82525081516020918201928201910280838360005b83811015612b78578181015183820152602001612b60565b50505050905001604052505050505050505050565b60055462010000900460ff1615612be0576040805162461bcd60e51b81526020600482015260126024820152712830bab9b0b136329d1039b43aba3237bbb760711b604482015290519081900360640190fd5b6005805461ff001962ff0000199091166201000017166101001790557f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a61235d611c5e565b60055462010000900460ff16612c82576040805162461bcd60e51b815260206004820152601660248201527f5061757361626c653a206e6f742073687574646f776e00000000000000000000604482015290519081900360640190fd5b6005805462ff0000191690557fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc61235d611c5e565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dd5aba4b306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612d2657600080fd5b505afa158015612d3a573d6000803e3d6000fd5b505050506040513d6020811015612d5057600080fd5b505190506001600160a01b03811615612e51576001600160a01b03841615612dda57806001600160a01b031663632447c9856040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015612dc157600080fd5b505af1158015612dd5573d6000803e3d6000fd5b505050505b6001600160a01b03831615612e5157806001600160a01b031663632447c9846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015612e3857600080fd5b505af1158015612e4c573d6000803e3d6000fd5b505050505b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ec657600080fd5b505afa158015612eda573d6000803e3d6000fd5b505050506040513d6020811015612ef057600080fd5b50516040805163419f775360e01b815290519192506001600160a01b0383169163419f77539160048082019260009290919082900301818387803b158015612f3757600080fd5b505af1158015612f4b573d6000803e3d6000fd5b505050505050565b6000612f5d611a24565b15612fa8576000612f7b670de0b6b3a7640000610c0d611fcb611a24565b9050612f8783826133a6565b9150612fa2612f94611c5e565b612f9c61172a565b83611d4e565b50610f92565b5090565b6001600160a01b038216612ff15760405162461bcd60e51b81526004018080602001828103825260218152602001806138726021913960400191505060405180910390fd5b612ffd82600083612cb7565b61303a81604051806060016040528060228152602001613799602291396001600160a01b0385166000908152602081905260409020549190611ea9565b6001600160a01b03831660009081526020819052604090205560025461306090826133a6565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60006130b261168a565b9050818110156130ea576130ce6130c983836133a6565b613403565b6130d661168a565b90508181106130e557816130e7565b805b91505b6131266130f5611c5e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690846134ea565b5050565b606061317f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661353c9092919063ffffffff16565b80519091501561215b5780806020019051602081101561319e57600080fd5b505161215b5760405162461bcd60e51b815260040180806020018281038252602a8152602001806138dc602a913960400191505060405180910390fd5b60008161322f576040805162461bcd60e51b815260206004820152600b60248201527f616d6f756e742069732030000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000613239610872565b90506000613248611fc66117aa565b90506000821580613257575081155b61326e5761326982610c0d87866121ba565b613270565b845b95945050505050565b610b71613284611c5e565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903084613553565b6001600160a01b038216613311576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61331d60008383612cb7565b60025461332a9082612160565b6002556001600160a01b0382166000908152602081905260409020546133509082612160565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828211156133fd576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561347257600080fd5b505afa158015613486573d6000803e3d6000fd5b505050506040513d602081101561349c57600080fd5b505160408051632e1a7d4d60e01b81526004810185905290519192506001600160a01b03831691632e1a7d4d9160248082019260009290919082900301818387803b158015612f3757600080fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261215b90849061312a565b606061354b84846000856135ad565b949350505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612e5190859061312a565b6060824710156135ee5760405162461bcd60e51b81526004018080602001828103825260268152602001806138036026913960400191505060405180910390fd5b6135f785613709565b613648576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106136875780518252601f199092019160209182019101613668565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146136e9576040519150601f19603f3d011682016040523d82523d6000602084013e6136ee565b606091505b50915091506136fe82828661370f565b979650505050505050565b3b151590565b6060831561371e57508161091d565b82511561372e5782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611efd578181015183820152602001611ee556fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220c843ac527a297a26c704a6ff51bac83c3603e01733ca909c8d002af12491aa9f64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "approveToken()": {
        "details": "Approve strategy to spend collateral token and strategy token of pool."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "convertFrom18(uint256)": {
        "details": "Convert from 18 decimals to token defined decimals."
      },
      "convertTo18(uint256)": {
        "details": "Convert to 18 decimals from token defined decimals."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "params": {
          "amount": "ERC20 token amount."
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "ERC20 token amount.",
          "deadline": "The time at which signature will expire",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "feeCollector()": {
        "details": "Get fee collector address"
      },
      "getPricePerShare()": {
        "details": "Return value will be in token defined decimals."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "multiTransfer(uint256[])": {
        "details": "Left 160 bits are the recipient address and the right 96 bits are the token amount.",
        "params": {
          "bits": "array of uint"
        },
        "returns": {
          "_0": "true/false"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature"
        }
      },
      "rebalance()": {
        "details": "Rebalance invested collateral to mitigate liquidation risk, if any. Behavior of rebalance is driven by risk parameters defined in strategy."
      },
      "resetApproval()": {
        "details": "Reset token approval of strategy. Called when updating strategy."
      },
      "sweepErc20(address)": {
        "details": "Convert given ERC20 token into collateral token via Uniswap",
        "params": {
          "_erc20": "Token address"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "tokenLocked()": {
        "details": "Returns collateral token locked in strategy"
      },
      "tokensHere()": {
        "details": "Returns the token stored in the pool. It will be in token defined decimals."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "totalValue()": {
        "details": "Returns total value of vesper pool, in terms of collateral token"
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "withdraw(uint256)": {
        "params": {
          "shares": "Pool shares. It will be in 18 decimals."
        }
      },
      "withdrawByStrategy(uint256)": {
        "details": "No withdraw fee will be assessed when this function is called. Only some white listed address can call this function.",
        "params": {
          "shares": "Pool shares. It will be in 18 decimals."
        }
      },
      "withdrawFee()": {
        "details": "Format: 1e16 = 1% fee"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256)": {
        "notice": "Deposit ERC20 tokens and receive pool shares depending on the current share price."
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit ERC20 tokens with permit aka gasless approval."
      },
      "getPricePerShare()": {
        "notice": "Get price per share"
      },
      "multiTransfer(uint256[])": {
        "notice": "Transfer tokens to multiple recipient"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spends"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral based on given shares and the current share price. Transfer earned rewards to caller. Withdraw fee, if any, will be deduced from given shares and transferred to feeCollector. Burn remaining shares and return collateral."
      },
      "withdrawByStrategy(uint256)": {
        "notice": "Withdraw collateral based on given shares and the current share price. Transfer earned rewards to caller. Burn shares and return collateral."
      },
      "withdrawFee()": {
        "notice": "Get withdraw fee for this pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 484,
        "contract": "contracts/pools/PUSDC.sol:PUSDC",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 490,
        "contract": "contracts/pools/PUSDC.sol:PUSDC",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 492,
        "contract": "contracts/pools/PUSDC.sol:PUSDC",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 494,
        "contract": "contracts/pools/PUSDC.sol:PUSDC",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 496,
        "contract": "contracts/pools/PUSDC.sol:PUSDC",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 498,
        "contract": "contracts/pools/PUSDC.sol:PUSDC",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 3704,
        "contract": "contracts/pools/PUSDC.sol:PUSDC",
        "label": "paused",
        "offset": 1,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 3706,
        "contract": "contracts/pools/PUSDC.sol:PUSDC",
        "label": "stopEverything",
        "offset": 2,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 2772,
        "contract": "contracts/pools/PUSDC.sol:PUSDC",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7093,
        "contract": "contracts/pools/PUSDC.sol:PUSDC",
        "label": "nonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}