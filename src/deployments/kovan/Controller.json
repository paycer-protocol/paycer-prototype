{
  "address": "0xcF6Bd0eAcCA6600fB14470DFFA3615182258f48B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aaveReferralCode",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "signature",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "executeTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        }
      ],
      "name": "executeTransactions",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "founderFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "founderVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "interestFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rebalanceFriction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "removePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "updateAaveReferralCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_founderFee",
          "type": "uint256"
        }
      ],
      "name": "updateFounderFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_founderVault",
          "type": "address"
        }
      ],
      "name": "updateFounderVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_interestFee",
          "type": "uint256"
        }
      ],
      "name": "updateInterestFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolRewards",
          "type": "address"
        }
      ],
      "name": "updatePoolRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_f",
          "type": "uint256"
        }
      ],
      "name": "updateRebalanceFriction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "updateStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "updateTreasuryPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "name": "updateUniswapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "updateWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x85a0793fa80af42e75153ff0a55bbadd438049d48198a04f91d3d1c3699f9b79",
  "receipt": {
    "to": null,
    "from": "0xD2faB04C99Dd67F5c7132eE058158ad4DfA6e613",
    "contractAddress": "0xcF6Bd0eAcCA6600fB14470DFFA3615182258f48B",
    "transactionIndex": 9,
    "gasUsed": "3898188",
    "logsBloom": "0x
    "blockHash": "0xde72554767ae1a05beb6564e3095c734309af855a5e7e54c56e437715661964e",
    "transactionHash": "0x85a0793fa80af42e75153ff0a55bbadd438049d48198a04f91d3d1c3699f9b79",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 28606238,
        "transactionHash": "0x85a0793fa80af42e75153ff0a55bbadd438049d48198a04f91d3d1c3699f9b79",
        "address": "0xcF6Bd0eAcCA6600fB14470DFFA3615182258f48B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d2fab04c99dd67f5c7132ee058158ad4dfa6e613"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0xde72554767ae1a05beb6564e3095c734309af855a5e7e54c56e437715661964e"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 28606238,
        "transactionHash": "0x85a0793fa80af42e75153ff0a55bbadd438049d48198a04f91d3d1c3699f9b79",
        "address": "0x82E951374178d60E03b27CeEB56AFB412A4576c1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cf6bd0eacca6600fb14470dffa3615182258f48b",
          "0x0000000000000000000000002a62975b1dc4f6f8201e15c97e400f51724c8158"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0xde72554767ae1a05beb6564e3095c734309af855a5e7e54c56e437715661964e"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 28606238,
        "transactionHash": "0x85a0793fa80af42e75153ff0a55bbadd438049d48198a04f91d3d1c3699f9b79",
        "address": "0x82E951374178d60E03b27CeEB56AFB412A4576c1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x000000000000000000000000cf6bd0eacca6600fb14470dffa3615182258f48b",
          "0x0000000000000000000000002a62975b1dc4f6f8201e15c97e400f51724c8158"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0xde72554767ae1a05beb6564e3095c734309af855a5e7e54c56e437715661964e"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 28606238,
        "transactionHash": "0x85a0793fa80af42e75153ff0a55bbadd438049d48198a04f91d3d1c3699f9b79",
        "address": "0x2A62975b1Dc4f6F8201E15C97E400f51724C8158",
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x000000000000000000000000cf6bd0eacca6600fb14470dffa3615182258f48b",
          "0x00000000000000000000000082e951374178d60e03b27ceeb56afb412a4576c1"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0xde72554767ae1a05beb6564e3095c734309af855a5e7e54c56e437715661964e"
      }
    ],
    "blockNumber": 28606238,
    "cumulativeGasUsed": "5230751",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8129f45ad3a4175699a8deb636a407a3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aaveReferralCode\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"name\":\"executeTransactions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"interestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rebalanceFriction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"updateAaveReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_founderFee\",\"type\":\"uint256\"}],\"name\":\"updateFounderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_founderVault\",\"type\":\"address\"}],\"name\":\"updateFounderVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interestFee\",\"type\":\"uint256\"}],\"name\":\"updateInterestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolRewards\",\"type\":\"address\"}],\"name\":\"updatePoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_f\",\"type\":\"uint256\"}],\"name\":\"updateRebalanceFriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"updateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"updateTreasuryPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"updateUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Allows proposed owner to accept ownership of the contract.\"},\"addPool(address)\":{\"details\":\"Add new pool in vesper system\",\"params\":{\"_pool\":\"Address of new pool\"}},\"executeTransaction(address,uint256,string,bytes)\":{\"details\":\"Execute transaction in given target contract\",\"params\":{\"data\":\"Encoded data for function call\",\"signature\":\"Signature of function in target contract\",\"target\":\"Address of target contract\",\"value\":\"Ether amount to transfer\"}},\"executeTransactions(address[],uint256[],string[],bytes[])\":{\"details\":\"Execute multiple transactions.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removePool(address)\":{\"details\":\"Remove pool from vesper system\",\"params\":{\"_pool\":\"Address of pool to be removed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Initiate transfer ownership of the contract to a new account (`proposedOwner`). Can only be called by the current owner. Current owner will still be owner until proposed owner accept ownership.\",\"params\":{\"proposedOwner\":\"proposed owner address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x9486045e189facd2e868ece35249872598ef03f1087fb6fa4d1161842daa2287\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"./interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"./interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"../sol-address-list/contracts/interfaces/IAddressList.sol\\\";\\nimport \\\"../sol-address-list/contracts/interfaces/IAddressListFactory.sol\\\";\\n\\ncontract Controller is Owned {\\n    using SafeMath for uint256;\\n\\n    // Pool specific params\\n    mapping(address => uint256) public withdrawFee;\\n    mapping(address => uint256) public interestFee;\\n    mapping(address => address) public feeCollector;\\n    mapping(address => uint256) public rebalanceFriction;\\n    mapping(address => address) public strategy;\\n    mapping(address => address) public poolRewards;\\n    uint16 public aaveReferralCode;\\n    address public founderVault;\\n    uint256 public founderFee = 5e16;\\n    address public treasuryPool;\\n    address public uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    IAddressList public immutable pools;\\n\\n    constructor() public {\\n        IAddressListFactory addressFactory =\\n            //IAddressListFactory(0xD57b41649f822C51a73C44Ba0B3da4A880aF0029); // mainnet\\n            IAddressListFactory(0x2A62975b1Dc4f6F8201E15C97E400f51724C8158); // kovan\\n        pools = IAddressList(addressFactory.createList());\\n    }\\n\\n    modifier validPool(address pool) {\\n        require(pools.contains(pool), \\\"Not a valid pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add new pool in vesper system\\n     * @param _pool Address of new pool\\n     */\\n    function addPool(address _pool) external onlyOwner {\\n        require(_pool != address(0), \\\"invalid-pool\\\");\\n        IERC20 pool = IERC20(_pool);\\n        require(pool.totalSupply() == 0, \\\"Zero supply required\\\");\\n        pools.add(_pool);\\n    }\\n\\n    /**\\n     * @dev Remove pool from vesper system\\n     * @param _pool Address of pool to be removed\\n     */\\n    function removePool(address _pool) external onlyOwner {\\n        IERC20 pool = IERC20(_pool);\\n        require(pool.totalSupply() == 0, \\\"Zero supply required\\\");\\n        pools.remove(_pool);\\n    }\\n\\n    /**\\n     * @dev Execute transaction in given target contract\\n     * @param target Address of target contract\\n     * @param value Ether amount to transfer\\n     * @param signature Signature of function in target contract\\n     * @param data Encoded data for function call\\n     */\\n    function executeTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data\\n    ) external payable onlyOwner returns (bytes memory) {\\n        return _executeTransaction(target, value, signature, data);\\n    }\\n\\n    /// @dev Execute multiple transactions.\\n    function executeTransactions(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas\\n    ) external payable onlyOwner {\\n        require(targets.length != 0, \\\"Must provide actions\\\");\\n        require(\\n            targets.length == values.length &&\\n                targets.length == signatures.length &&\\n                targets.length == calldatas.length,\\n            \\\"Transaction data mismatch\\\"\\n        );\\n\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            _executeTransaction(targets[i], values[i], signatures[i], calldatas[i]);\\n        }\\n    }\\n\\n    function updateAaveReferralCode(uint16 referralCode) external onlyOwner {\\n        aaveReferralCode = referralCode;\\n    }\\n\\n    function updateFeeCollector(address _pool, address _collector)\\n        external\\n        onlyOwner\\n        validPool(_pool)\\n    {\\n        require(_collector != address(0), \\\"invalid-collector\\\");\\n        require(feeCollector[_pool] != _collector, \\\"same-collector\\\");\\n        feeCollector[_pool] = _collector;\\n    }\\n\\n    function updateFounderVault(address _founderVault) external onlyOwner {\\n        founderVault = _founderVault;\\n    }\\n\\n    function updateFounderFee(uint256 _founderFee) external onlyOwner {\\n        require(founderFee != _founderFee, \\\"same-founderFee\\\");\\n        require(_founderFee <= 1e18, \\\"founderFee-above-100%\\\");\\n        founderFee = _founderFee;\\n    }\\n\\n    function updateInterestFee(address _pool, uint256 _interestFee)\\n        external\\n        onlyOwner\\n        validPool(_pool)\\n    {\\n        require(_interestFee <= 1e18, \\\"Fee limit reached\\\");\\n        require(feeCollector[_pool] != address(0), \\\"FeeCollector not set\\\");\\n        interestFee[_pool] = _interestFee;\\n    }\\n\\n    function updateStrategy(address _pool, address _newStrategy)\\n        external\\n        onlyOwner\\n        validPool(_pool)\\n    {\\n        require(_newStrategy != address(0), \\\"invalid-strategy-address\\\");\\n        address currentStrategy = strategy[_pool];\\n        require(currentStrategy != _newStrategy, \\\"same-pool-strategy\\\");\\n        require(IStrategy(_newStrategy).pool() == _pool, \\\"wrong-pool\\\");\\n        IVesperPool vpool = IVesperPool(_pool);\\n        if (currentStrategy != address(0)) {\\n            require(IStrategy(currentStrategy).isUpgradable(), \\\"strategy-is-not-upgradable\\\");\\n            vpool.resetApproval();\\n        }\\n        strategy[_pool] = _newStrategy;\\n        vpool.approveToken();\\n    }\\n\\n    function updateRebalanceFriction(address _pool, uint256 _f)\\n        external\\n        onlyOwner\\n        validPool(_pool)\\n    {\\n        require(rebalanceFriction[_pool] != _f, \\\"same-friction\\\");\\n        rebalanceFriction[_pool] = _f;\\n    }\\n\\n    function updatePoolRewards(address _pool, address _poolRewards)\\n        external\\n        onlyOwner\\n        validPool(_pool)\\n    {\\n        require(IPoolRewards(_poolRewards).pool() == _pool, \\\"wrong-pool\\\");\\n        poolRewards[_pool] = _poolRewards;\\n    }\\n\\n    function updateTreasuryPool(address _pool) external onlyOwner validPool(_pool) {\\n        treasuryPool = _pool;\\n    }\\n\\n    function updateUniswapRouter(address _uniswapRouter) external onlyOwner {\\n        uniswapRouter = _uniswapRouter;\\n    }\\n\\n    function updateWithdrawFee(address _pool, uint256 _newWithdrawFee)\\n        external\\n        onlyOwner\\n        validPool(_pool)\\n    {\\n        require(_newWithdrawFee <= 1e18, \\\"withdraw-fee-limit-reached\\\");\\n        require(withdrawFee[_pool] != _newWithdrawFee, \\\"same-withdraw-fee\\\");\\n        require(feeCollector[_pool] != address(0), \\\"FeeCollector-not-set\\\");\\n        withdrawFee[_pool] = _newWithdrawFee;\\n    }\\n\\n    function isPool(address _pool) external view returns (bool) {\\n        return pools.contains(_pool);\\n    }\\n\\n    function _executeTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data\\n    ) internal onlyOwner returns (bytes memory) {\\n        bytes memory callData;\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\\n        require(success, \\\"Transaction execution reverted.\\\");\\n        return returnData;\\n    }\\n}\\n\",\"keccak256\":\"0xe4487876e517599041c9d91cd6b0d37cfaf40f39aa6aa4e1b86c71ab8bebdab7\",\"license\":\"MIT\"},\"contracts/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n// Requried one small change in openzeppelin version of ownable, so imported\\n// source code here. Notice line 26 for change.\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    /**\\n     * @dev Changed _owner from 'private' to 'internal'\\n     */\\n    address internal _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n/**\\n * @dev Contract module extends Ownable and provide a way for safe transfer ownership.\\n * Proposed owner has to call acceptOwnership in order to complete ownership trasnfer.\\n */\\ncontract Owned is Ownable {\\n    address private _proposedOwner;\\n\\n    /**\\n     * @dev Initiate transfer ownership of the contract to a new account (`proposedOwner`).\\n     * Can only be called by the current owner. Current owner will still be owner until\\n     * proposed owner accept ownership.\\n     * @param proposedOwner proposed owner address\\n     */\\n    function transferOwnership(address proposedOwner) public override onlyOwner {\\n        //solhint-disable-next-line reason-string\\n        require(proposedOwner != address(0), \\\"Proposed owner is the zero address\\\");\\n        _proposedOwner = proposedOwner;\\n    }\\n\\n    /// @dev Allows proposed owner to accept ownership of the contract.\\n    function acceptOwnership() public {\\n        require(msg.sender == _proposedOwner, \\\"Caller is not the proposed owner\\\");\\n        emit OwnershipTransferred(_owner, _proposedOwner);\\n        _owner = _proposedOwner;\\n        _proposedOwner = address(0);\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n        _proposedOwner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xf8fe1b1d930efb5bb31788f0def5ffd4b632b60fcc5d465fc44b4e3ba8129c5b\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPoolRewards {\\n    function notifyRewardAmount(uint256) external;\\n\\n    function claimReward(address) external;\\n\\n    function updateReward(address) external;\\n\\n    function rewardForDuration() external view returns (uint256);\\n\\n    function claimable(address) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf436b7f6ced7f52564ce0cfae9e4f6e82944c99be34bd9cf8b2aa4be0d4b1f67\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function deposit(uint256 amount) external;\\n\\n    function beforeWithdraw() external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function withdrawAll() external;\\n\\n    function isUpgradable() external view returns (bool);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function totalLocked() external view returns (uint256);\\n\\n    //Lifecycle functions\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xcc18dc44c0440999e8c1d20a03d0c10db03e517a6adb0df655802b1b4770ac41\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function approveToken() external;\\n\\n    function deposit() external payable;\\n\\n    function deposit(uint256) external;\\n\\n    function multiTransfer(uint256[] memory) external returns (bool);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function rebalance() external;\\n\\n    function resetApproval() external;\\n\\n    function sweepErc20(address) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function withdrawETH(uint256) external;\\n\\n    function withdrawByStrategy(uint256) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function getPricePerShare() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd7e6b4863520289099293550577c2423b425a5e6bc8ed35bd808ef3b8a90e5c4\",\"license\":\"MIT\"},\"sol-address-list/contracts/interfaces/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\ninterface IAddressList {\\n    event AddressUpdated(address indexed a, address indexed sender);\\n    event AddressRemoved(address indexed a, address indexed sender);\\n\\n    function add(address a) external returns (bool);\\n\\n    function addValue(address a, uint256 v) external returns (bool);\\n\\n    function addMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values) external returns (uint256);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function removeMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function length() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa0565d70a23098bfc657a785ff308775bc858843be9bb45f75616d9cb03d43a1\",\"license\":\"MIT\"},\"sol-address-list/contracts/interfaces/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\ninterface IAddressListFactory {\\n    event ListCreated(address indexed _sender, address indexed _newList);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0xd8a8c8f165891fada8711964a0de5d525b3ab62c37d6dde4108e90361bf4cc7c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405266b1a2bc2ec50000600955600b80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d1790553480156200004257600080fd5b5060006200004f62000140565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000732a62975b1dc4f6f8201e15c97e400f51724c81589050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620000ee57600080fd5b505af115801562000103573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000129919062000144565b60601b6001600160601b0319166080525062000174565b3390565b60006020828403121562000156578081fd5b81516001600160a01b03811681146200016d578182fd5b9392505050565b60805160601c6125e2620001c46000398061060e52806107d75280610a565280610dbc5280610ff052806111b952806113cc52806116515280611763528061189852806119c552506125e26000f3fe6080604052600436106101e35760003560e01c8063715018a611610102578063ac19a71b11610095578063c8ec1b2a11610064578063c8ec1b2a14610542578063d914cd4b14610557578063dd5aba4b14610577578063f2fde38b14610597576101e3565b8063ac19a71b146104d8578063b14a1e8e146104ed578063b99c47bc1461050d578063c5c51dca1461052d576101e3565b80638da5cb5b116100d15780638da5cb5b146104635780639018269714610478578063908bb2ae14610498578063a06e01ba146104b8576101e3565b8063715018a614610404578063735de9f71461041957806379ba50971461042e5780637b62f07014610443576101e3565b806329f88ace1161017a57806348df58291161014957806348df58291461038f5780634bc24c89146103a45780635b16ebb7146103b75780636a2b1176146103e4576101e3565b806329f88ace1461030f5780632ffd975c1461032f5780633b7d09461461034f5780634564a6c81461036f576101e3565b80631ac3ddeb116101b65780631ac3ddeb1461027557806320777aed146102a25780632224fa25146102c2578063228bfd9f146102e2576101e3565b806301913bcc146101e85780630b189c621461020a57806310ec01b5146102355780631a5102ca14610255575b600080fd5b3480156101f457600080fd5b50610208610203366004611d06565b6105b7565b005b34801561021657600080fd5b5061021f61077f565b60405161022c9190612505565b60405180910390f35b34801561024157600080fd5b50610208610250366004611d3e565b610789565b34801561026157600080fd5b50610208610270366004611f04565b6108cd565b34801561028157600080fd5b50610295610290366004611cc7565b61091a565b60405161022c9190612514565b3480156102ae57600080fd5b506102086102bd366004611cc7565b61092c565b6102d56102d0366004611d69565b6109a1565b60405161022c9190611fda565b3480156102ee57600080fd5b506103026102fd366004611cc7565b6109ed565b60405161022c9190611fbb565b34801561031b57600080fd5b5061020861032a366004611d06565b610a08565b34801561033b57600080fd5b5061020861034a366004611d3e565b610d6e565b34801561035b57600080fd5b5061020861036a366004611cc7565b610f11565b34801561037b57600080fd5b5061029561038a366004611cc7565b61107c565b34801561039b57600080fd5b5061030261108e565b6102086103b2366004611de6565b61109d565b3480156103c357600080fd5b506103d76103d2366004611cc7565b61119f565b60405161022c9190611fcf565b3480156103f057600080fd5b506102956103ff366004611cc7565b611244565b34801561041057600080fd5b50610208611256565b34801561042557600080fd5b506103026112e1565b34801561043a57600080fd5b506102086112f0565b34801561044f57600080fd5b5061020861045e366004611d3e565b61137e565b34801561046f57600080fd5b506103026114e9565b34801561048457600080fd5b50610208610493366004611f26565b6114f8565b3480156104a457600080fd5b506102086104b3366004611cc7565b61157c565b3480156104c457600080fd5b506103026104d3366004611cc7565b6115d3565b3480156104e457600080fd5b506103026115ee565b3480156104f957600080fd5b50610208610508366004611cc7565b611603565b34801561051957600080fd5b50610208610528366004611d06565b611715565b34801561053957600080fd5b50610302611896565b34801561054e57600080fd5b506102956118ba565b34801561056357600080fd5b50610208610572366004611cc7565b6118c0565b34801561058357600080fd5b50610302610592366004611cc7565b6119fa565b3480156105a357600080fd5b506102086105b2366004611cc7565b611a15565b6105bf611a92565b6000546001600160a01b039081169116146105f55760405162461bcd60e51b81526004016105ec906122ac565b60405180910390fd5b604051630bb7c8fd60e31b815282906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e890610643908490600401611fbb565b60206040518083038186803b15801561065b57600080fd5b505afa15801561066f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106939190611ee4565b6106af5760405162461bcd60e51b81526004016105ec9061207b565b826001600160a01b0316826001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f257600080fd5b505afa158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a9190611cea565b6001600160a01b0316146107505760405162461bcd60e51b81526004016105ec906123f4565b506001600160a01b03918216600090815260076020526040902080546001600160a01b03191691909216179055565b60085461ffff1681565b610791611a92565b6000546001600160a01b039081169116146107be5760405162461bcd60e51b81526004016105ec906122ac565b604051630bb7c8fd60e31b815282906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e89061080c908490600401611fbb565b60206040518083038186803b15801561082457600080fd5b505afa158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c9190611ee4565b6108785760405162461bcd60e51b81526004016105ec9061207b565b6001600160a01b0383166000908152600560205260409020548214156108b05760405162461bcd60e51b81526004016105ec90612162565b506001600160a01b03909116600090815260056020526040902055565b6108d5611a92565b6000546001600160a01b039081169116146109025760405162461bcd60e51b81526004016105ec906122ac565b6008805461ffff191661ffff92909216919091179055565b60026020526000908152604090205481565b610934611a92565b6000546001600160a01b039081169116146109615760405162461bcd60e51b81526004016105ec906122ac565b600880546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b60606109ab611a92565b6000546001600160a01b039081169116146109d85760405162461bcd60e51b81526004016105ec906122ac565b6109e485858585611a96565b95945050505050565b6006602052600090815260409020546001600160a01b031681565b610a10611a92565b6000546001600160a01b03908116911614610a3d5760405162461bcd60e51b81526004016105ec906122ac565b604051630bb7c8fd60e31b815282906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e890610a8b908490600401611fbb565b60206040518083038186803b158015610aa357600080fd5b505afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190611ee4565b610af75760405162461bcd60e51b81526004016105ec9061207b565b6001600160a01b038216610b1d5760405162461bcd60e51b81526004016105ec9061212b565b6001600160a01b038084166000908152600660205260409020548116908316811415610b5b5760405162461bcd60e51b81526004016105ec9061223e565b836001600160a01b0316836001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9e57600080fd5b505afa158015610bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd69190611cea565b6001600160a01b031614610bfc5760405162461bcd60e51b81526004016105ec906123f4565b836001600160a01b03821615610ced57816001600160a01b0316635479d9406040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4557600080fd5b505afa158015610c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7d9190611ee4565b610c995760405162461bcd60e51b81526004016105ec90612275565b806001600160a01b031663330b8b716040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610cd457600080fd5b505af1158015610ce8573d6000803e3d6000fd5b505050505b6001600160a01b0385811660009081526006602052604080822080546001600160a01b031916888516179055805163266dc75760e21b81529051928416926399b71d5c9260048084019391929182900301818387803b158015610d4f57600080fd5b505af1158015610d63573d6000803e3d6000fd5b505050505050505050565b610d76611a92565b6000546001600160a01b03908116911614610da35760405162461bcd60e51b81526004016105ec906122ac565b604051630bb7c8fd60e31b815282906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e890610df1908490600401611fbb565b60206040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190611ee4565b610e5d5760405162461bcd60e51b81526004016105ec9061207b565b670de0b6b3a7640000821115610e855760405162461bcd60e51b81526004016105ec906121d0565b6001600160a01b038316600090815260026020526040902054821415610ebd5760405162461bcd60e51b81526004016105ec90612207565b6001600160a01b0383811660009081526004602052604090205416610ef45760405162461bcd60e51b81526004016105ec906122e1565b506001600160a01b03909116600090815260026020526040902055565b610f19611a92565b6000546001600160a01b03908116911614610f465760405162461bcd60e51b81526004016105ec906122ac565b6000819050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8457600080fd5b505afa158015610f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbc9190611f3e565b15610fd95760405162461bcd60e51b81526004016105ec906120b2565b604051631484968760e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906329092d0e90611025908590600401611fbb565b602060405180830381600087803b15801561103f57600080fd5b505af1158015611053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110779190611ee4565b505050565b60036020526000908152604090205481565b600a546001600160a01b031681565b6110a5611a92565b6000546001600160a01b039081169116146110d25760405162461bcd60e51b81526004016105ec906122ac565b83516110f05760405162461bcd60e51b81526004016105ec9061234f565b82518451148015611102575081518451145b801561110f575080518451145b61112b5760405162461bcd60e51b81526004016105ec90612386565b60005b84518110156111985761118f85828151811061114657fe5b602002602001015185838151811061115a57fe5b602002602001015185848151811061116e57fe5b602002602001015185858151811061118257fe5b6020026020010151611a96565b5060010161112e565b5050505050565b604051630bb7c8fd60e31b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e8906111ee908590600401611fbb565b60206040518083038186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123e9190611ee4565b92915050565b60056020526000908152604090205481565b61125e611a92565b6000546001600160a01b0390811691161461128b5760405162461bcd60e51b81526004016105ec906122ac565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319908116909155600180549091169055565b600b546001600160a01b031681565b6001546001600160a01b0316331461131a5760405162461bcd60e51b81526004016105ec906124d0565b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b611386611a92565b6000546001600160a01b039081169116146113b35760405162461bcd60e51b81526004016105ec906122ac565b604051630bb7c8fd60e31b815282906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e890611401908490600401611fbb565b60206040518083038186803b15801561141957600080fd5b505afa15801561142d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114519190611ee4565b61146d5760405162461bcd60e51b81526004016105ec9061207b565b670de0b6b3a76400008211156114955760405162461bcd60e51b81526004016105ec906123bd565b6001600160a01b03838116600090815260046020526040902054166114cc5760405162461bcd60e51b81526004016105ec9061242b565b506001600160a01b03909116600090815260036020526040902055565b6000546001600160a01b031690565b611500611a92565b6000546001600160a01b0390811691161461152d5760405162461bcd60e51b81526004016105ec906122ac565b80600954141561154f5760405162461bcd60e51b81526004016105ec90612044565b670de0b6b3a76400008111156115775760405162461bcd60e51b81526004016105ec90612499565b600955565b611584611a92565b6000546001600160a01b039081169116146115b15760405162461bcd60e51b81526004016105ec906122ac565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6004602052600090815260409020546001600160a01b031681565b6008546201000090046001600160a01b031681565b61160b611a92565b6000546001600160a01b039081169116146116385760405162461bcd60e51b81526004016105ec906122ac565b604051630bb7c8fd60e31b815281906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e890611686908490600401611fbb565b60206040518083038186803b15801561169e57600080fd5b505afa1580156116b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d69190611ee4565b6116f25760405162461bcd60e51b81526004016105ec9061207b565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b61171d611a92565b6000546001600160a01b0390811691161461174a5760405162461bcd60e51b81526004016105ec906122ac565b604051630bb7c8fd60e31b815282906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e890611798908490600401611fbb565b60206040518083038186803b1580156117b057600080fd5b505afa1580156117c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e89190611ee4565b6118045760405162461bcd60e51b81526004016105ec9061207b565b6001600160a01b03821661182a5760405162461bcd60e51b81526004016105ec90612318565b6001600160a01b03838116600090815260046020526040902054811690831614156118675760405162461bcd60e51b81526004016105ec9061200d565b506001600160a01b03918216600090815260046020526040902080546001600160a01b03191691909216179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b60095481565b6118c8611a92565b6000546001600160a01b039081169116146118f55760405162461bcd60e51b81526004016105ec906122ac565b6001600160a01b03811661191b5760405162461bcd60e51b81526004016105ec90612199565b6000819050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561195957600080fd5b505afa15801561196d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119919190611f3e565b156119ae5760405162461bcd60e51b81526004016105ec906120b2565b604051630a3b0a4f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630a3b0a4f90611025908590600401611fbb565b6007602052600090815260409020546001600160a01b031681565b611a1d611a92565b6000546001600160a01b03908116911614611a4a5760405162461bcd60e51b81526004016105ec906122ac565b6001600160a01b038116611a705760405162461bcd60e51b81526004016105ec906120e9565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6060611aa0611a92565b6000546001600160a01b03908116911614611acd5760405162461bcd60e51b81526004016105ec906122ac565b6060835160001415611ae0575081611b0c565b838051906020012083604051602001611afa929190611f56565b60405160208183030381529060405290505b60006060876001600160a01b03168784604051611b299190611f9f565b60006040518083038185875af1925050503d8060008114611b66576040519150601f19603f3d011682016040523d82523d6000602084013e611b6b565b606091505b509150915081611b8d5760405162461bcd60e51b81526004016105ec90612462565b979650505050505050565b600082601f830112611ba8578081fd5b8135611bbb611bb682612544565b61251d565b818152915060208083019084810160005b84811015611bf557611be3888484358a0101611c5e565b84529282019290820190600101611bcc565b505050505092915050565b600082601f830112611c10578081fd5b8135611c1e611bb682612544565b818152915060208083019084810181840286018201871015611c3f57600080fd5b60005b84811015611bf557813584529282019290820190600101611c42565b600082601f830112611c6e578081fd5b813567ffffffffffffffff811115611c84578182fd5b611c97601f8201601f191660200161251d565b9150808252836020828501011115611cae57600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215611cd8578081fd5b8135611ce381612594565b9392505050565b600060208284031215611cfb578081fd5b8151611ce381612594565b60008060408385031215611d18578081fd5b8235611d2381612594565b91506020830135611d3381612594565b809150509250929050565b60008060408385031215611d50578182fd5b8235611d5b81612594565b946020939093013593505050565b60008060008060808587031215611d7e578182fd5b8435611d8981612594565b935060208501359250604085013567ffffffffffffffff80821115611dac578384fd5b611db888838901611c5e565b93506060870135915080821115611dcd578283fd5b50611dda87828801611c5e565b91505092959194509250565b60008060008060808587031215611dfb578384fd5b843567ffffffffffffffff80821115611e12578586fd5b818701915087601f830112611e25578586fd5b8135611e33611bb682612544565b80828252602080830192508086018c828387028901011115611e53578a8bfd5b8a96505b84871015611e7e578035611e6a81612594565b845260019690960195928101928101611e57565b509098508901359350505080821115611e95578485fd5b611ea188838901611c00565b94506040870135915080821115611eb6578384fd5b611ec288838901611b98565b93506060870135915080821115611ed7578283fd5b50611dda87828801611b98565b600060208284031215611ef5578081fd5b81518015158114611ce3578182fd5b600060208284031215611f15578081fd5b813561ffff81168114611ce3578182fd5b600060208284031215611f37578081fd5b5035919050565b600060208284031215611f4f578081fd5b5051919050565b7fffffffff00000000000000000000000000000000000000000000000000000000831681528151600090611f91816004850160208701612564565b919091016004019392505050565b60008251611fb1818460208701612564565b9190910192915050565b6001600160a01b0391909116815260200190565b901515815260200190565b6000602082528251806020840152611ff9816040850160208701612564565b601f01601f19169190910160400192915050565b6020808252600e908201527f73616d652d636f6c6c6563746f72000000000000000000000000000000000000604082015260600190565b6020808252600f908201527f73616d652d666f756e6465724665650000000000000000000000000000000000604082015260600190565b60208082526010908201527f4e6f7420612076616c696420706f6f6c00000000000000000000000000000000604082015260600190565b60208082526014908201527f5a65726f20737570706c79207265717569726564000000000000000000000000604082015260600190565b60208082526022908201527f50726f706f736564206f776e657220697320746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526018908201527f696e76616c69642d73747261746567792d616464726573730000000000000000604082015260600190565b6020808252600d908201527f73616d652d6672696374696f6e00000000000000000000000000000000000000604082015260600190565b6020808252600c908201527f696e76616c69642d706f6f6c0000000000000000000000000000000000000000604082015260600190565b6020808252601a908201527f77697468647261772d6665652d6c696d69742d72656163686564000000000000604082015260600190565b60208082526011908201527f73616d652d77697468647261772d666565000000000000000000000000000000604082015260600190565b60208082526012908201527f73616d652d706f6f6c2d73747261746567790000000000000000000000000000604082015260600190565b6020808252601a908201527f73747261746567792d69732d6e6f742d75706772616461626c65000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526014908201527f466565436f6c6c6563746f722d6e6f742d736574000000000000000000000000604082015260600190565b60208082526011908201527f696e76616c69642d636f6c6c6563746f72000000000000000000000000000000604082015260600190565b60208082526014908201527f4d7573742070726f7669646520616374696f6e73000000000000000000000000604082015260600190565b60208082526019908201527f5472616e73616374696f6e2064617461206d69736d6174636800000000000000604082015260600190565b60208082526011908201527f466565206c696d69742072656163686564000000000000000000000000000000604082015260600190565b6020808252600a908201527f77726f6e672d706f6f6c00000000000000000000000000000000000000000000604082015260600190565b60208082526014908201527f466565436f6c6c6563746f72206e6f7420736574000000000000000000000000604082015260600190565b6020808252601f908201527f5472616e73616374696f6e20657865637574696f6e2072657665727465642e00604082015260600190565b60208082526015908201527f666f756e6465724665652d61626f76652d313030250000000000000000000000604082015260600190565b6020808252818101527f43616c6c6572206973206e6f74207468652070726f706f736564206f776e6572604082015260600190565b61ffff91909116815260200190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561253c57600080fd5b604052919050565b600067ffffffffffffffff82111561255a578081fd5b5060209081020190565b60005b8381101561257f578181015183820152602001612567565b8381111561258e576000848401525b50505050565b6001600160a01b03811681146125a957600080fd5b5056fea2646970667358221220dbbce2d8a5aa18378d0791a7f9e4d2f00408d3bcf9984920d5010ee23499861964736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063715018a611610102578063ac19a71b11610095578063c8ec1b2a11610064578063c8ec1b2a14610542578063d914cd4b14610557578063dd5aba4b14610577578063f2fde38b14610597576101e3565b8063ac19a71b146104d8578063b14a1e8e146104ed578063b99c47bc1461050d578063c5c51dca1461052d576101e3565b80638da5cb5b116100d15780638da5cb5b146104635780639018269714610478578063908bb2ae14610498578063a06e01ba146104b8576101e3565b8063715018a614610404578063735de9f71461041957806379ba50971461042e5780637b62f07014610443576101e3565b806329f88ace1161017a57806348df58291161014957806348df58291461038f5780634bc24c89146103a45780635b16ebb7146103b75780636a2b1176146103e4576101e3565b806329f88ace1461030f5780632ffd975c1461032f5780633b7d09461461034f5780634564a6c81461036f576101e3565b80631ac3ddeb116101b65780631ac3ddeb1461027557806320777aed146102a25780632224fa25146102c2578063228bfd9f146102e2576101e3565b806301913bcc146101e85780630b189c621461020a57806310ec01b5146102355780631a5102ca14610255575b600080fd5b3480156101f457600080fd5b50610208610203366004611d06565b6105b7565b005b34801561021657600080fd5b5061021f61077f565b60405161022c9190612505565b60405180910390f35b34801561024157600080fd5b50610208610250366004611d3e565b610789565b34801561026157600080fd5b50610208610270366004611f04565b6108cd565b34801561028157600080fd5b50610295610290366004611cc7565b61091a565b60405161022c9190612514565b3480156102ae57600080fd5b506102086102bd366004611cc7565b61092c565b6102d56102d0366004611d69565b6109a1565b60405161022c9190611fda565b3480156102ee57600080fd5b506103026102fd366004611cc7565b6109ed565b60405161022c9190611fbb565b34801561031b57600080fd5b5061020861032a366004611d06565b610a08565b34801561033b57600080fd5b5061020861034a366004611d3e565b610d6e565b34801561035b57600080fd5b5061020861036a366004611cc7565b610f11565b34801561037b57600080fd5b5061029561038a366004611cc7565b61107c565b34801561039b57600080fd5b5061030261108e565b6102086103b2366004611de6565b61109d565b3480156103c357600080fd5b506103d76103d2366004611cc7565b61119f565b60405161022c9190611fcf565b3480156103f057600080fd5b506102956103ff366004611cc7565b611244565b34801561041057600080fd5b50610208611256565b34801561042557600080fd5b506103026112e1565b34801561043a57600080fd5b506102086112f0565b34801561044f57600080fd5b5061020861045e366004611d3e565b61137e565b34801561046f57600080fd5b506103026114e9565b34801561048457600080fd5b50610208610493366004611f26565b6114f8565b3480156104a457600080fd5b506102086104b3366004611cc7565b61157c565b3480156104c457600080fd5b506103026104d3366004611cc7565b6115d3565b3480156104e457600080fd5b506103026115ee565b3480156104f957600080fd5b50610208610508366004611cc7565b611603565b34801561051957600080fd5b50610208610528366004611d06565b611715565b34801561053957600080fd5b50610302611896565b34801561054e57600080fd5b506102956118ba565b34801561056357600080fd5b50610208610572366004611cc7565b6118c0565b34801561058357600080fd5b50610302610592366004611cc7565b6119fa565b3480156105a357600080fd5b506102086105b2366004611cc7565b611a15565b6105bf611a92565b6000546001600160a01b039081169116146105f55760405162461bcd60e51b81526004016105ec906122ac565b60405180910390fd5b604051630bb7c8fd60e31b815282906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e890610643908490600401611fbb565b60206040518083038186803b15801561065b57600080fd5b505afa15801561066f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106939190611ee4565b6106af5760405162461bcd60e51b81526004016105ec9061207b565b826001600160a01b0316826001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f257600080fd5b505afa158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a9190611cea565b6001600160a01b0316146107505760405162461bcd60e51b81526004016105ec906123f4565b506001600160a01b03918216600090815260076020526040902080546001600160a01b03191691909216179055565b60085461ffff1681565b610791611a92565b6000546001600160a01b039081169116146107be5760405162461bcd60e51b81526004016105ec906122ac565b604051630bb7c8fd60e31b815282906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e89061080c908490600401611fbb565b60206040518083038186803b15801561082457600080fd5b505afa158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c9190611ee4565b6108785760405162461bcd60e51b81526004016105ec9061207b565b6001600160a01b0383166000908152600560205260409020548214156108b05760405162461bcd60e51b81526004016105ec90612162565b506001600160a01b03909116600090815260056020526040902055565b6108d5611a92565b6000546001600160a01b039081169116146109025760405162461bcd60e51b81526004016105ec906122ac565b6008805461ffff191661ffff92909216919091179055565b60026020526000908152604090205481565b610934611a92565b6000546001600160a01b039081169116146109615760405162461bcd60e51b81526004016105ec906122ac565b600880546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b60606109ab611a92565b6000546001600160a01b039081169116146109d85760405162461bcd60e51b81526004016105ec906122ac565b6109e485858585611a96565b95945050505050565b6006602052600090815260409020546001600160a01b031681565b610a10611a92565b6000546001600160a01b03908116911614610a3d5760405162461bcd60e51b81526004016105ec906122ac565b604051630bb7c8fd60e31b815282906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e890610a8b908490600401611fbb565b60206040518083038186803b158015610aa357600080fd5b505afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190611ee4565b610af75760405162461bcd60e51b81526004016105ec9061207b565b6001600160a01b038216610b1d5760405162461bcd60e51b81526004016105ec9061212b565b6001600160a01b038084166000908152600660205260409020548116908316811415610b5b5760405162461bcd60e51b81526004016105ec9061223e565b836001600160a01b0316836001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9e57600080fd5b505afa158015610bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd69190611cea565b6001600160a01b031614610bfc5760405162461bcd60e51b81526004016105ec906123f4565b836001600160a01b03821615610ced57816001600160a01b0316635479d9406040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4557600080fd5b505afa158015610c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7d9190611ee4565b610c995760405162461bcd60e51b81526004016105ec90612275565b806001600160a01b031663330b8b716040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610cd457600080fd5b505af1158015610ce8573d6000803e3d6000fd5b505050505b6001600160a01b0385811660009081526006602052604080822080546001600160a01b031916888516179055805163266dc75760e21b81529051928416926399b71d5c9260048084019391929182900301818387803b158015610d4f57600080fd5b505af1158015610d63573d6000803e3d6000fd5b505050505050505050565b610d76611a92565b6000546001600160a01b03908116911614610da35760405162461bcd60e51b81526004016105ec906122ac565b604051630bb7c8fd60e31b815282906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e890610df1908490600401611fbb565b60206040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190611ee4565b610e5d5760405162461bcd60e51b81526004016105ec9061207b565b670de0b6b3a7640000821115610e855760405162461bcd60e51b81526004016105ec906121d0565b6001600160a01b038316600090815260026020526040902054821415610ebd5760405162461bcd60e51b81526004016105ec90612207565b6001600160a01b0383811660009081526004602052604090205416610ef45760405162461bcd60e51b81526004016105ec906122e1565b506001600160a01b03909116600090815260026020526040902055565b610f19611a92565b6000546001600160a01b03908116911614610f465760405162461bcd60e51b81526004016105ec906122ac565b6000819050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8457600080fd5b505afa158015610f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbc9190611f3e565b15610fd95760405162461bcd60e51b81526004016105ec906120b2565b604051631484968760e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906329092d0e90611025908590600401611fbb565b602060405180830381600087803b15801561103f57600080fd5b505af1158015611053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110779190611ee4565b505050565b60036020526000908152604090205481565b600a546001600160a01b031681565b6110a5611a92565b6000546001600160a01b039081169116146110d25760405162461bcd60e51b81526004016105ec906122ac565b83516110f05760405162461bcd60e51b81526004016105ec9061234f565b82518451148015611102575081518451145b801561110f575080518451145b61112b5760405162461bcd60e51b81526004016105ec90612386565b60005b84518110156111985761118f85828151811061114657fe5b602002602001015185838151811061115a57fe5b602002602001015185848151811061116e57fe5b602002602001015185858151811061118257fe5b6020026020010151611a96565b5060010161112e565b5050505050565b604051630bb7c8fd60e31b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e8906111ee908590600401611fbb565b60206040518083038186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123e9190611ee4565b92915050565b60056020526000908152604090205481565b61125e611a92565b6000546001600160a01b0390811691161461128b5760405162461bcd60e51b81526004016105ec906122ac565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319908116909155600180549091169055565b600b546001600160a01b031681565b6001546001600160a01b0316331461131a5760405162461bcd60e51b81526004016105ec906124d0565b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b611386611a92565b6000546001600160a01b039081169116146113b35760405162461bcd60e51b81526004016105ec906122ac565b604051630bb7c8fd60e31b815282906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e890611401908490600401611fbb565b60206040518083038186803b15801561141957600080fd5b505afa15801561142d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114519190611ee4565b61146d5760405162461bcd60e51b81526004016105ec9061207b565b670de0b6b3a76400008211156114955760405162461bcd60e51b81526004016105ec906123bd565b6001600160a01b03838116600090815260046020526040902054166114cc5760405162461bcd60e51b81526004016105ec9061242b565b506001600160a01b03909116600090815260036020526040902055565b6000546001600160a01b031690565b611500611a92565b6000546001600160a01b0390811691161461152d5760405162461bcd60e51b81526004016105ec906122ac565b80600954141561154f5760405162461bcd60e51b81526004016105ec90612044565b670de0b6b3a76400008111156115775760405162461bcd60e51b81526004016105ec90612499565b600955565b611584611a92565b6000546001600160a01b039081169116146115b15760405162461bcd60e51b81526004016105ec906122ac565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6004602052600090815260409020546001600160a01b031681565b6008546201000090046001600160a01b031681565b61160b611a92565b6000546001600160a01b039081169116146116385760405162461bcd60e51b81526004016105ec906122ac565b604051630bb7c8fd60e31b815281906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e890611686908490600401611fbb565b60206040518083038186803b15801561169e57600080fd5b505afa1580156116b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d69190611ee4565b6116f25760405162461bcd60e51b81526004016105ec9061207b565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b61171d611a92565b6000546001600160a01b0390811691161461174a5760405162461bcd60e51b81526004016105ec906122ac565b604051630bb7c8fd60e31b815282906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635dbe47e890611798908490600401611fbb565b60206040518083038186803b1580156117b057600080fd5b505afa1580156117c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e89190611ee4565b6118045760405162461bcd60e51b81526004016105ec9061207b565b6001600160a01b03821661182a5760405162461bcd60e51b81526004016105ec90612318565b6001600160a01b03838116600090815260046020526040902054811690831614156118675760405162461bcd60e51b81526004016105ec9061200d565b506001600160a01b03918216600090815260046020526040902080546001600160a01b03191691909216179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b60095481565b6118c8611a92565b6000546001600160a01b039081169116146118f55760405162461bcd60e51b81526004016105ec906122ac565b6001600160a01b03811661191b5760405162461bcd60e51b81526004016105ec90612199565b6000819050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561195957600080fd5b505afa15801561196d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119919190611f3e565b156119ae5760405162461bcd60e51b81526004016105ec906120b2565b604051630a3b0a4f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630a3b0a4f90611025908590600401611fbb565b6007602052600090815260409020546001600160a01b031681565b611a1d611a92565b6000546001600160a01b03908116911614611a4a5760405162461bcd60e51b81526004016105ec906122ac565b6001600160a01b038116611a705760405162461bcd60e51b81526004016105ec906120e9565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6060611aa0611a92565b6000546001600160a01b03908116911614611acd5760405162461bcd60e51b81526004016105ec906122ac565b6060835160001415611ae0575081611b0c565b838051906020012083604051602001611afa929190611f56565b60405160208183030381529060405290505b60006060876001600160a01b03168784604051611b299190611f9f565b60006040518083038185875af1925050503d8060008114611b66576040519150601f19603f3d011682016040523d82523d6000602084013e611b6b565b606091505b509150915081611b8d5760405162461bcd60e51b81526004016105ec90612462565b979650505050505050565b600082601f830112611ba8578081fd5b8135611bbb611bb682612544565b61251d565b818152915060208083019084810160005b84811015611bf557611be3888484358a0101611c5e565b84529282019290820190600101611bcc565b505050505092915050565b600082601f830112611c10578081fd5b8135611c1e611bb682612544565b818152915060208083019084810181840286018201871015611c3f57600080fd5b60005b84811015611bf557813584529282019290820190600101611c42565b600082601f830112611c6e578081fd5b813567ffffffffffffffff811115611c84578182fd5b611c97601f8201601f191660200161251d565b9150808252836020828501011115611cae57600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215611cd8578081fd5b8135611ce381612594565b9392505050565b600060208284031215611cfb578081fd5b8151611ce381612594565b60008060408385031215611d18578081fd5b8235611d2381612594565b91506020830135611d3381612594565b809150509250929050565b60008060408385031215611d50578182fd5b8235611d5b81612594565b946020939093013593505050565b60008060008060808587031215611d7e578182fd5b8435611d8981612594565b935060208501359250604085013567ffffffffffffffff80821115611dac578384fd5b611db888838901611c5e565b93506060870135915080821115611dcd578283fd5b50611dda87828801611c5e565b91505092959194509250565b60008060008060808587031215611dfb578384fd5b843567ffffffffffffffff80821115611e12578586fd5b818701915087601f830112611e25578586fd5b8135611e33611bb682612544565b80828252602080830192508086018c828387028901011115611e53578a8bfd5b8a96505b84871015611e7e578035611e6a81612594565b845260019690960195928101928101611e57565b509098508901359350505080821115611e95578485fd5b611ea188838901611c00565b94506040870135915080821115611eb6578384fd5b611ec288838901611b98565b93506060870135915080821115611ed7578283fd5b50611dda87828801611b98565b600060208284031215611ef5578081fd5b81518015158114611ce3578182fd5b600060208284031215611f15578081fd5b813561ffff81168114611ce3578182fd5b600060208284031215611f37578081fd5b5035919050565b600060208284031215611f4f578081fd5b5051919050565b7fffffffff00000000000000000000000000000000000000000000000000000000831681528151600090611f91816004850160208701612564565b919091016004019392505050565b60008251611fb1818460208701612564565b9190910192915050565b6001600160a01b0391909116815260200190565b901515815260200190565b6000602082528251806020840152611ff9816040850160208701612564565b601f01601f19169190910160400192915050565b6020808252600e908201527f73616d652d636f6c6c6563746f72000000000000000000000000000000000000604082015260600190565b6020808252600f908201527f73616d652d666f756e6465724665650000000000000000000000000000000000604082015260600190565b60208082526010908201527f4e6f7420612076616c696420706f6f6c00000000000000000000000000000000604082015260600190565b60208082526014908201527f5a65726f20737570706c79207265717569726564000000000000000000000000604082015260600190565b60208082526022908201527f50726f706f736564206f776e657220697320746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526018908201527f696e76616c69642d73747261746567792d616464726573730000000000000000604082015260600190565b6020808252600d908201527f73616d652d6672696374696f6e00000000000000000000000000000000000000604082015260600190565b6020808252600c908201527f696e76616c69642d706f6f6c0000000000000000000000000000000000000000604082015260600190565b6020808252601a908201527f77697468647261772d6665652d6c696d69742d72656163686564000000000000604082015260600190565b60208082526011908201527f73616d652d77697468647261772d666565000000000000000000000000000000604082015260600190565b60208082526012908201527f73616d652d706f6f6c2d73747261746567790000000000000000000000000000604082015260600190565b6020808252601a908201527f73747261746567792d69732d6e6f742d75706772616461626c65000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526014908201527f466565436f6c6c6563746f722d6e6f742d736574000000000000000000000000604082015260600190565b60208082526011908201527f696e76616c69642d636f6c6c6563746f72000000000000000000000000000000604082015260600190565b60208082526014908201527f4d7573742070726f7669646520616374696f6e73000000000000000000000000604082015260600190565b60208082526019908201527f5472616e73616374696f6e2064617461206d69736d6174636800000000000000604082015260600190565b60208082526011908201527f466565206c696d69742072656163686564000000000000000000000000000000604082015260600190565b6020808252600a908201527f77726f6e672d706f6f6c00000000000000000000000000000000000000000000604082015260600190565b60208082526014908201527f466565436f6c6c6563746f72206e6f7420736574000000000000000000000000604082015260600190565b6020808252601f908201527f5472616e73616374696f6e20657865637574696f6e2072657665727465642e00604082015260600190565b60208082526015908201527f666f756e6465724665652d61626f76652d313030250000000000000000000000604082015260600190565b6020808252818101527f43616c6c6572206973206e6f74207468652070726f706f736564206f776e6572604082015260600190565b61ffff91909116815260200190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561253c57600080fd5b604052919050565b600067ffffffffffffffff82111561255a578081fd5b5060209081020190565b60005b8381101561257f578181015183820152602001612567565b8381111561258e576000848401525b50505050565b6001600160a01b03811681146125a957600080fd5b5056fea2646970667358221220dbbce2d8a5aa18378d0791a7f9e4d2f00408d3bcf9984920d5010ee23499861964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Allows proposed owner to accept ownership of the contract."
      },
      "addPool(address)": {
        "details": "Add new pool in vesper system",
        "params": {
          "_pool": "Address of new pool"
        }
      },
      "executeTransaction(address,uint256,string,bytes)": {
        "details": "Execute transaction in given target contract",
        "params": {
          "data": "Encoded data for function call",
          "signature": "Signature of function in target contract",
          "target": "Address of target contract",
          "value": "Ether amount to transfer"
        }
      },
      "executeTransactions(address[],uint256[],string[],bytes[])": {
        "details": "Execute multiple transactions."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removePool(address)": {
        "details": "Remove pool from vesper system",
        "params": {
          "_pool": "Address of pool to be removed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Initiate transfer ownership of the contract to a new account (`proposedOwner`). Can only be called by the current owner. Current owner will still be owner until proposed owner accept ownership.",
        "params": {
          "proposedOwner": "proposed owner address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3491,
        "contract": "contracts/Controller.sol:Controller",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3597,
        "contract": "contracts/Controller.sol:Controller",
        "label": "_proposedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2821,
        "contract": "contracts/Controller.sol:Controller",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2825,
        "contract": "contracts/Controller.sol:Controller",
        "label": "interestFee",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2829,
        "contract": "contracts/Controller.sol:Controller",
        "label": "feeCollector",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2833,
        "contract": "contracts/Controller.sol:Controller",
        "label": "rebalanceFriction",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2837,
        "contract": "contracts/Controller.sol:Controller",
        "label": "strategy",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2841,
        "contract": "contracts/Controller.sol:Controller",
        "label": "poolRewards",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2843,
        "contract": "contracts/Controller.sol:Controller",
        "label": "aaveReferralCode",
        "offset": 0,
        "slot": "8",
        "type": "t_uint16"
      },
      {
        "astId": 2845,
        "contract": "contracts/Controller.sol:Controller",
        "label": "founderVault",
        "offset": 2,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2848,
        "contract": "contracts/Controller.sol:Controller",
        "label": "founderFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2850,
        "contract": "contracts/Controller.sol:Controller",
        "label": "treasuryPool",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2853,
        "contract": "contracts/Controller.sol:Controller",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}