{
  "address": "0x24FdBF97A95d425E2e53D1d35C4920c82Ba784f1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardTreasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseAPY",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "LogRewardTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "APY_ACCURACY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardInTreasury",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardAllowedForThisPool",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAPY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "rewardAPY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseAPY",
          "type": "uint256"
        }
      ],
      "name": "setBaseAPY",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "setRewardTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "rewardDebt",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "lastDepositedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7114eaeb4948867ce083bdac869845561e614b1f43ee245db49669427573e44",
  "receipt": {
    "to": null,
    "from": "0x51D484Fe4e287dd972400e7516Cd87df2c9BFe18",
    "contractAddress": "0x24FdBF97A95d425E2e53D1d35C4920c82Ba784f1",
    "transactionIndex": 0,
    "gasUsed": "1564970",
    "logsBloom": "0x00000000000000020000000000020000000000000000000000800004000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800001000000000000400100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000000020000000000000000001000000000000000000000000004000080000000000000401000000000000000040000000000000100000000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x7a62272a04cea1359d2638122a411ff15d612bc1d9ea16106afb18ae46a762d6",
    "transactionHash": "0xd7114eaeb4948867ce083bdac869845561e614b1f43ee245db49669427573e44",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 23209717,
        "transactionHash": "0xd7114eaeb4948867ce083bdac869845561e614b1f43ee245db49669427573e44",
        "address": "0x24FdBF97A95d425E2e53D1d35C4920c82Ba784f1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000051d484fe4e287dd972400e7516cd87df2c9bfe18"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7a62272a04cea1359d2638122a411ff15d612bc1d9ea16106afb18ae46a762d6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23209717,
        "transactionHash": "0xd7114eaeb4948867ce083bdac869845561e614b1f43ee245db49669427573e44",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000051d484fe4e287dd972400e7516cd87df2c9bfe18",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a6cbf52b5f0fda0000000000000000000000000000000000000000000000000645011704fa70000000000000000000000000000000000000000000000003e40707d7cf7e47aafb000000000000000000000000000000000000000000000000059e3521d99b60260000000000000000000000000000000000000000000003e407aea3c4a9a6bad5",
        "logIndex": 1,
        "blockHash": "0x7a62272a04cea1359d2638122a411ff15d612bc1d9ea16106afb18ae46a762d6"
      }
    ],
    "blockNumber": 23209717,
    "cumulativeGasUsed": "1564970",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa9f31589E0a8c0b12068329736ed6385A8F77b62",
    "0xa9f31589E0a8c0b12068329736ed6385A8F77b62",
    "0xD63A987AA4CdA0b71BbFeD8aE1E7EB4329E65016",
    1000
  ],
  "solcInputHash": "bd774f397bdea0f0e58c66ee83e9468b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTreasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseAPY\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"LogRewardTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APY_ACCURACY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardInTreasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAllowedForThisPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rewardAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseAPY\",\"type\":\"uint256\"}],\"name\":\"setBaseAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setRewardTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"availableReward()\":{\"returns\":{\"rewardAllowedForThisPool\":\"allowed reward amount to be spent by this pool\",\"rewardInTreasury\":\"reward amount in treasury\"}},\"claim(address)\":{\"details\":\"Here comes the formula to calculate reward token amount\",\"params\":{\"to\":\"Receiver of rewards.\"}},\"constructor\":{\"params\":{\"_baseAPY\":\"The APY of reward to be distributed per second.\",\"_lpToken\":\"The staking contract address.\",\"_rewardToken\":\"The reward token contract address.\",\"_rewardTreasury\":\"The reward treasury contract address.\"}},\"deposit(uint256,address)\":{\"params\":{\"amount\":\"LP token amount to deposit.\",\"to\":\"The receiver of `amount` deposit benefit.\"}},\"emergencyWithdraw(address)\":{\"params\":{\"to\":\"Receiver of the LP tokens.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingReward(address)\":{\"details\":\"It doens't update accRewardPerShare, it's just a view function.\",\"params\":{\"_user\":\"Address of user.\"},\"returns\":{\"pending\":\"reward for a given user.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewardAPY(address)\":{\"returns\":{\"_0\":\"APY\"}},\"setBaseAPY(uint256)\":{\"details\":\"Its decimals count is ACC_REWARD_PRECISION\",\"params\":{\"_baseAPY\":\"The amount of reward to be distributed per second.\"}},\"setRewardTreasury(address)\":{\"params\":{\"_wallet\":\"address that contains the rewards\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"update(address)\":{\"details\":\"Updates accRewardPerShare and lastRewardTime.\"},\"withdraw(uint256,address)\":{\"params\":{\"amount\":\"LP token amount to withdraw.\",\"to\":\"Receiver of the LP tokens and rewards.\"}}},\"title\":\"Staking Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"availableReward()\":{\"notice\":\"return available reward amount\"},\"baseAPY()\":{\"notice\":\"APY.\"},\"claim(address)\":{\"notice\":\"Claim rewards and send to `to`.\"},\"deposit(uint256,address)\":{\"notice\":\"Deposit LP tokens for reward allocation.\"},\"emergencyWithdraw(address)\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY.\"},\"lpToken()\":{\"notice\":\"Address of the LP token.\"},\"pendingReward(address)\":{\"notice\":\"View function to see pending reward on frontend.\"},\"rewardAPY(address)\":{\"notice\":\"Caclulates the reward apy of the user\"},\"rewardToken()\":{\"notice\":\"Address of reward contract.\"},\"rewardTreasury()\":{\"notice\":\"Reward treasury\"},\"setBaseAPY(uint256)\":{\"notice\":\"Sets the reward per second to be distributed. Can only be called by the owner.\"},\"setRewardTreasury(address)\":{\"notice\":\"set reward wallet\"},\"update(address)\":{\"notice\":\"Update reward variables.\"},\"userInfo(address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraw LP tokens and harvest rewards to `to`.\"}},\"notice\":\"You can use this contract for staking tokens and distribute rewards\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/Staking.sol\":\"Staking\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"contracts/staking/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/utils/Pausable.sol';\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n\\n/// @title Staking Contract\\n/// @notice You can use this contract for staking tokens and distribute rewards\\n/// @dev All function calls are currently implemented without side effects\\ncontract Staking is ReentrancyGuard, Pausable, Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Info of each user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of reward entitled to user.\\n    /// `lastDepositedAt` The timestamp of the last deposit.\\n    /// `accRewardPerShare` reward amount allocated per LP token.\\n    /// `lastRewardTime` Last time that the reward is calculated.\\n    struct UserInfo {\\n        uint256 amount;\\n        int256 rewardDebt;\\n        uint256 lastDepositedAt;\\n        uint256 accRewardPerShare;\\n        uint256 lastRewardTime;\\n    }\\n\\n    uint256 public constant APY_ACCURACY = 1e4;\\n\\n    uint256 private constant ACC_REWARD_PRECISION = 1e12;\\n\\n    /// @notice Address of reward contract.\\n    IERC20 public rewardToken;\\n\\n    /// @notice Address of the LP token.\\n    IERC20 public lpToken;\\n\\n    /// @notice Reward treasury\\n    address public rewardTreasury;\\n\\n    /// @notice APY.\\n    uint256 public baseAPY;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(address => UserInfo) public userInfo;\\n\\n    event Deposit(address indexed user, uint256 amount, address indexed to);\\n    event Withdraw(address indexed user, uint256 amount, address indexed to);\\n    event Claim(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 amount,\\n        address indexed to\\n    );\\n\\n    event LogUpdate(\\n        address indexed user,\\n        uint256 lastRewardTime,\\n        uint256 amount,\\n        uint256 accRewardPerShare\\n    );\\n    event LogRewardTreasury(address indexed wallet);\\n\\n    /**\\n     * @param _rewardToken The reward token contract address.\\n     * @param _lpToken The staking contract address.\\n     * @param _rewardTreasury The reward treasury contract address.\\n     * @param _baseAPY The APY of reward to be distributed per second.\\n     */\\n    constructor(\\n        IERC20 _rewardToken, \\n        IERC20 _lpToken, \\n        address _rewardTreasury, \\n        uint256 _baseAPY\\n    ) public {\\n        rewardToken = _rewardToken;\\n        lpToken = _lpToken;\\n        rewardTreasury = _rewardTreasury;\\n        baseAPY = _baseAPY;\\n    }\\n\\n    /**\\n     * @notice Sets the reward per second to be distributed. Can only be called by the owner.\\n     * @dev Its decimals count is ACC_REWARD_PRECISION\\n     * @param _baseAPY The amount of reward to be distributed per second.\\n     */\\n    function setBaseAPY(uint256 _baseAPY) public onlyOwner {\\n        baseAPY = _baseAPY;\\n    }\\n\\n    /**\\n     * @notice set reward wallet\\n     * @param _wallet address that contains the rewards\\n     */\\n    function setRewardTreasury(address _wallet) external onlyOwner {\\n        rewardTreasury = _wallet;\\n        emit LogRewardTreasury(_wallet);\\n    }\\n\\n    /**\\n     * @notice return available reward amount\\n     * @return rewardInTreasury reward amount in treasury\\n     * @return rewardAllowedForThisPool allowed reward amount to be spent by this pool\\n     */\\n    function availableReward()\\n        public\\n        view\\n        returns (uint256 rewardInTreasury, uint256 rewardAllowedForThisPool)\\n    {\\n        rewardInTreasury = rewardToken.balanceOf(rewardTreasury);\\n        rewardAllowedForThisPool = rewardToken.allowance(\\n            rewardTreasury,\\n            address(this)\\n        );\\n    }\\n\\n    /**\\n     * @notice Caclulates the reward apy of the user\\n     * @return APY\\n     */\\n    function rewardAPY(address _user) public view returns (uint256) {\\n        uint256 tierFactor = _tierFactor(_user);\\n        return baseAPY.mul(tierFactor).div(10);\\n    }\\n\\n    /**\\n     * @notice Caclulates the tier factor of the user that affects \\n     * @return Tier factor of the user - accuracy: 10\\n     */\\n    function _tierFactor(address _user) internal view returns (uint256) {\\n        // PCR decimals: 18\\n        UserInfo memory user = userInfo[_user];\\n        if (user.amount < 5000 * 10**18) return 0;\\n        if (user.amount < 15000 * 10**18) return 5;\\n        if (user.amount < 35000 * 10**18) return 10;\\n        if (user.amount < 100000 * 10**18) return 15;\\n        return 20; \\n    }\\n\\n    /**\\n     * @notice View function to see pending reward on frontend.\\n     * @dev It doens't update accRewardPerShare, it's just a view function.\\n     * @param _user Address of user.\\n     * @return pending reward for a given user.\\n     */\\n    function pendingReward(address _user)\\n        external\\n        view\\n        returns (uint256 pending)\\n    {\\n        UserInfo memory user = userInfo[_user];\\n        uint256 accRewardPerShare_ = user.accRewardPerShare;\\n        uint256 apy = rewardAPY(_user);\\n\\n        if (block.timestamp > user.lastRewardTime && user.amount != 0) {\\n            uint256 time = block.timestamp.sub(user.lastRewardTime);\\n            uint256 timeReward = user.amount.mul(time).mul(ACC_REWARD_PRECISION).mul(apy).div(APY_ACCURACY).div(365 days);\\n            accRewardPerShare_ = accRewardPerShare_.add(timeReward / user.amount);\\n        }\\n        pending = ((user.amount.mul(accRewardPerShare_).div(ACC_REWARD_PRECISION)).toInt256().sub(user.rewardDebt)).toUint256();\\n    }\\n\\n    /**\\n     * @notice Update reward variables.\\n     * @dev Updates accRewardPerShare and lastRewardTime.\\n     */\\n    function update(address _user) public {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 apy = rewardAPY(_user);\\n        if (block.timestamp > user.lastRewardTime) {\\n            if (user.amount > 0) {\\n                uint256 time = block.timestamp.sub(user.lastRewardTime);\\n                uint256 timeReward = user.amount.mul(time).mul(ACC_REWARD_PRECISION).mul(apy).div(APY_ACCURACY).div(365 days);\\n                user.accRewardPerShare = user.accRewardPerShare.add(timeReward.div(user.amount));\\n            }\\n            user.lastRewardTime = block.timestamp;\\n            emit LogUpdate(_user, user.lastRewardTime, user.amount, user.accRewardPerShare);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit LP tokens for reward allocation.\\n     * @param amount LP token amount to deposit.\\n     * @param to The receiver of `amount` deposit benefit.\\n     */\\n    function deposit(uint256 amount, address to) public nonReentrant whenNotPaused {\\n        update(to);\\n        UserInfo storage user = userInfo[to];\\n\\n        // Effects\\n        user.lastDepositedAt = block.timestamp;\\n        user.amount = user.amount.add(amount);\\n        user.rewardDebt = user.rewardDebt.add(\\n            int256(amount.mul(user.accRewardPerShare) / ACC_REWARD_PRECISION)\\n        );\\n\\n        lpToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Deposit(msg.sender, amount, to);\\n    }\\n\\n    /**\\n     * @notice Withdraw LP tokens and harvest rewards to `to`.\\n     * @param amount LP token amount to withdraw.\\n     * @param to Receiver of the LP tokens and rewards.\\n     */\\n    function withdraw(uint256 amount, address to) public nonReentrant whenNotPaused {\\n        update(to);\\n        UserInfo storage user = userInfo[msg.sender];\\n        int256 accumulatedReward = int256(\\n            user.amount.mul(user.accRewardPerShare) / ACC_REWARD_PRECISION\\n        );\\n        uint256 _pendingReward = accumulatedReward\\n            .sub(user.rewardDebt)\\n            .toUint256();\\n\\n        // Effects\\n        user.rewardDebt = accumulatedReward.sub(\\n            int256(amount.mul(user.accRewardPerShare) / ACC_REWARD_PRECISION)\\n        );\\n        user.amount = user.amount.sub(amount);\\n\\n        rewardToken.safeTransferFrom(rewardTreasury, to, _pendingReward);\\n        lpToken.safeTransfer(to, amount);\\n\\n        emit Withdraw(msg.sender, amount, to);\\n        emit Claim(msg.sender, _pendingReward);\\n    }\\n\\n    /**\\n     * @notice Claim rewards and send to `to`.\\n     * @dev Here comes the formula to calculate reward token amount\\n     * @param to Receiver of rewards.\\n     */\\n    function claim(address to) public nonReentrant whenNotPaused {\\n        update(to);\\n        UserInfo storage user = userInfo[msg.sender];\\n        int256 accumulatedReward = int256(\\n            user.amount.mul(user.accRewardPerShare) / ACC_REWARD_PRECISION\\n        );\\n        uint256 _pendingReward = accumulatedReward\\n            .sub(user.rewardDebt)\\n            .toUint256();\\n\\n        // Effects\\n        user.rewardDebt = accumulatedReward;\\n\\n        // Interactions\\n        if (_pendingReward != 0) {\\n            rewardToken.safeTransferFrom(rewardTreasury, to, _pendingReward);\\n        }\\n\\n        emit Claim(msg.sender, _pendingReward);\\n    }\\n\\n    /**\\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n     * @param to Receiver of the LP tokens.\\n     */\\n    function emergencyWithdraw(address to) public nonReentrant whenNotPaused {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        // Note: transfer can fail or succeed if `amount` is zero.\\n        lpToken.safeTransfer(to, amount);\\n        emit EmergencyWithdraw(msg.sender, amount, to);\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {\\n        revert();\\n    }\\n}\\n\",\"keccak256\":\"0x478d359142ed70111cee843d2c8193c4ad55ee10aa1a7049f50be73dbf37b54d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001a4238038062001a428339810160408190526200003491620000ee565b60016000818155815460ff19169091556200004e620000ea565b60018054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600280546001600160a01b03199081166001600160a01b039687161790915560038054821694861694909417909355600480549093169190931617905560055562000160565b3390565b6000806000806080858703121562000104578384fd5b8451620001118162000147565b6020860151909450620001248162000147565b6040860151909350620001378162000147565b6060959095015193969295505050565b6001600160a01b03811681146200015d57600080fd5b50565b6118d280620001706000396000f3fe608060405234801561001057600080fd5b506004361061016b5760003560e01c80636e553f65116100cd578063a493415f11610081578063f2fde38b11610066578063f2fde38b146102ac578063f40f0f52146102bf578063f7c618c1146102d25761016b565b8063a493415f14610291578063c7c934a1146102a45761016b565b8063715018a6116100b2578063715018a61461026e578063763c494b146102765780638da5cb5b146102895761016b565b80636e553f65146102485780636ff1c9bc1461025b5761016b565b80634ad84b34116101245780635c975abb116101095780635c975abb1461020b5780635ee6efd0146102205780635fcbd285146102335761016b565b80634ad84b34146101ed57806354709764146102035761016b565b80631c1b8772116101555780631c1b8772146101b25780631e83409a146101c5578063214405a9146101d85761016b565b8062f714ce146101705780631959a00214610185575b600080fd5b61018361017e366004611341565b6102da565b005b6101986101933660046112d6565b6104a0565b6040516101a9959493929190611829565b60405180910390f35b6101836101c03660046112d6565b6104cf565b6101836101d33660046112d6565b6105e3565b6101e0610702565b6040516101a99190611820565b6101f5610708565b6040516101a992919061184c565b6101e061081f565b610213610825565b6040516101a991906113f4565b61018361022e366004611311565b61082e565b61023b610872565b6040516101a99190611389565b610183610256366004611341565b610881565b6101836102693660046112d6565b6109a4565b610183610a6a565b6101e06102843660046112d6565b610aa9565b61023b610ada565b61018361029f3660046112d6565b610aee565b61023b610b8f565b6101836102ba3660046112d6565b610b9e565b6101e06102cd3660046112d6565b610c81565b61023b610db8565b600260005414156103065760405162461bcd60e51b81526004016102fd906117e9565b60405180910390fd5b6002600055610313610825565b156103305760405162461bcd60e51b81526004016102fd906115d2565b610339816104cf565b3360009081526006602052604081206003810154815491929164e8d4a51000916103639190610dc7565b8161036a57fe5b049050600061038e610389846001015484610e0a90919063ffffffff16565b610e50565b90506103c064e8d4a510006103b0856003015488610dc790919063ffffffff16565b816103b757fe5b84919004610e0a565b600184015582546103d19086610e76565b83556004546002546103f1916001600160a01b0391821691168684610e9e565b600354610408906001600160a01b03168587610f29565b836001600160a01b0316336001600160a01b03167f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b28760405161044b9190611820565b60405180910390a3336001600160a01b03167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d48260405161048c9190611820565b60405180910390a250506001600055505050565b600660205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b6001600160a01b0381166000908152600660205260408120906104f183610aa9565b905081600401544211156105de5781541561058857600061051f836004015442610e7690919063ffffffff16565b905060006105616301e1338061055b61271061055b8761055564e8d4a510006105558a8d60000154610dc790919063ffffffff16565b90610dc7565b90610f48565b845490915061058090610575908390610f48565b600386015490610f7a565b600385015550505b4260048301819055825460038401546040516001600160a01b038716937f029af3fb3c244c9fb9fd3c42dbd1e98392f2f98d6b6fb32304ad04382d4a5e80936105d593919290919061185a565b60405180910390a25b505050565b600260005414156106065760405162461bcd60e51b81526004016102fd906117e9565b6002600055610613610825565b156106305760405162461bcd60e51b81526004016102fd906115d2565b610639816104cf565b3360009081526006602052604081206003810154815491929164e8d4a51000916106639190610dc7565b8161066a57fe5b0490506000610689610389846001015484610e0a90919063ffffffff16565b60018401839055905080156106b6576004546002546106b6916001600160a01b0391821691168684610e9e565b336001600160a01b03167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040516106ef9190611820565b60405180910390a2505060016000555050565b60055481565b600254600480546040516370a0823160e01b815260009384936001600160a01b03918216936370a0823193610741939091169101611389565b60206040518083038186803b15801561075957600080fd5b505afa15801561076d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107919190611329565b60025460048054604051636eb1769f60e11b81529395506001600160a01b039283169363dd62ed3e936107c99392169130910161139d565b60206040518083038186803b1580156107e157600080fd5b505afa1580156107f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108199190611329565b90509091565b61271081565b60015460ff1690565b610836610f9f565b6001600160a01b0316610847610ada565b6001600160a01b03161461086d5760405162461bcd60e51b81526004016102fd9061167f565b600555565b6003546001600160a01b031681565b600260005414156108a45760405162461bcd60e51b81526004016102fd906117e9565b60026000556108b1610825565b156108ce5760405162461bcd60e51b81526004016102fd906115d2565b6108d7816104cf565b6001600160a01b038116600090815260066020526040902042600282015580546109019084610f7a565b815560038101546109329064e8d4a510009061091e908690610dc7565b8161092557fe5b6001840154919004610fa3565b600182015560035461094f906001600160a01b0316333086610e9e565b816001600160a01b0316336001600160a01b03167fe31c7b8d08ee7db0afa68782e1028ef92305caeea8626633ad44d413e30f6b2f856040516109929190611820565b60405180910390a35050600160005550565b600260005414156109c75760405162461bcd60e51b81526004016102fd906117e9565b60026000556109d4610825565b156109f15760405162461bcd60e51b81526004016102fd906115d2565b33600090815260066020526040812080548282556001820192909255600354909190610a27906001600160a01b03168483610f29565b826001600160a01b0316336001600160a01b03167faaeda929aa102e867049528ec7cd2499e3a2f8846e736ae7935f234dfbf500d9836040516109929190611820565b610a72610f9f565b6001600160a01b0316610a83610ada565b6001600160a01b03161461016b5760405162461bcd60e51b81526004016102fd9061167f565b600080610ab583610fe9565b9050610ad1600a61055b83600554610dc790919063ffffffff16565b9150505b919050565b60015461010090046001600160a01b031690565b610af6610f9f565b6001600160a01b0316610b07610ada565b6001600160a01b031614610b2d5760405162461bcd60e51b81526004016102fd9061167f565b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517ffdd8f4378171881d7612b21a5d9673d49f25072ed487831bb7baf1bdee37bf0290600090a250565b6004546001600160a01b031681565b610ba6610f9f565b6001600160a01b0316610bb7610ada565b6001600160a01b031614610bdd5760405162461bcd60e51b81526004016102fd9061167f565b6001600160a01b038116610c035760405162461bcd60e51b81526004016102fd90611432565b6001546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b6000610c8b611290565b506001600160a01b0382166000908152600660209081526040808320815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830181905260049091015460808301529091610ced85610aa9565b9050826080015142118015610d025750825115155b15610d76576000610d20846080015142610e7690919063ffffffff16565b90506000610d566301e1338061055b61271061055b8761055564e8d4a510006105558a8e60000151610dc790919063ffffffff16565b9050610d7185600001518281610d6857fe5b86919004610f7a565b935050505b610daf6103898460200151610da9610da464e8d4a5100061055b888a60000151610dc790919063ffffffff16565b6110c3565b90610e0a565b95945050505050565b6002546001600160a01b031681565b600082610dd657506000610e04565b82820282848281610de357fe5b0414610e015760405162461bcd60e51b81526004016102fd9061163e565b90505b92915050565b6000818303818312801590610e1f5750838113155b80610e345750600083128015610e3457508381135b610e015760405162461bcd60e51b81526004016102fd90611748565b600080821215610e725760405162461bcd60e51b81526004016102fd90611609565b5090565b600082821115610e985760405162461bcd60e51b81526004016102fd90611507565b50900390565b610f23846323b872dd60e01b858585604051602401610ebf939291906113b7565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526110e8565b50505050565b6105de8363a9059cbb60e01b8484604051602401610ebf9291906113db565b6000808211610f695760405162461bcd60e51b81526004016102fd9061159b565b818381610f7257fe5b049392505050565b600082820183811015610e015760405162461bcd60e51b81526004016102fd9061148f565b3390565b6000828201818312801590610fb85750838112155b80610fcd5750600083128015610fcd57508381125b610e015760405162461bcd60e51b81526004016102fd906114c6565b6000610ff3611290565b506001600160a01b038216600090815260066020908152604091829020825160a08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260040154608083015269010f0cf064dd592000001115611063576000915050610ad5565b805169032d26d12e980b6000001115611080576005915050610ad5565b80516907695a92c20d6fe00000111561109d57600a915050610ad5565b805169152d02c7e14af680000011156110ba57600f915050610ad5565b50601492915050565b6000600160ff1b8210610e725760405162461bcd60e51b81526004016102fd906116eb565b606061113d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111779092919063ffffffff16565b8051909150156105de578080602001905181019061115b91906112f1565b6105de5760405162461bcd60e51b81526004016102fd9061178c565b60606111868484600085611190565b90505b9392505050565b6060824710156111b25760405162461bcd60e51b81526004016102fd9061153e565b6111bb85611251565b6111d75760405162461bcd60e51b81526004016102fd906116b4565b60006060866001600160a01b031685876040516111f4919061136d565b60006040518083038185875af1925050503d8060008114611231576040519150601f19603f3d011682016040523d82523d6000602084013e611236565b606091505b5091509150611246828286611257565b979650505050505050565b3b151590565b60608315611266575081611189565b8251156112765782518084602001fd5b8160405162461bcd60e51b81526004016102fd91906113ff565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b0381168114610e0457600080fd5b6000602082840312156112e7578081fd5b61118983836112bf565b600060208284031215611302578081fd5b81518015158114610e01578182fd5b600060208284031215611322578081fd5b5035919050565b60006020828403121561133a578081fd5b5051919050565b60008060408385031215611353578081fd5b8235915061136484602085016112bf565b90509250929050565b6000825161137f818460208701611870565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060208252825180602084015261141e816040850160208701611870565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252818101527f53616665436173743a2076616c7565206d75737420626520706f736974697665604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526028908201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160408201527f6e20696e74323536000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b948552602085019390935260408401919091526060830152608082015260a00190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60005b8381101561188b578181015183820152602001611873565b83811115610f23575050600091015256fea2646970667358221220164b8c5bd651f1546e9c7328c4ca0cd35b8f01400c052ae89337bdc3fb20ced564736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016b5760003560e01c80636e553f65116100cd578063a493415f11610081578063f2fde38b11610066578063f2fde38b146102ac578063f40f0f52146102bf578063f7c618c1146102d25761016b565b8063a493415f14610291578063c7c934a1146102a45761016b565b8063715018a6116100b2578063715018a61461026e578063763c494b146102765780638da5cb5b146102895761016b565b80636e553f65146102485780636ff1c9bc1461025b5761016b565b80634ad84b34116101245780635c975abb116101095780635c975abb1461020b5780635ee6efd0146102205780635fcbd285146102335761016b565b80634ad84b34146101ed57806354709764146102035761016b565b80631c1b8772116101555780631c1b8772146101b25780631e83409a146101c5578063214405a9146101d85761016b565b8062f714ce146101705780631959a00214610185575b600080fd5b61018361017e366004611341565b6102da565b005b6101986101933660046112d6565b6104a0565b6040516101a9959493929190611829565b60405180910390f35b6101836101c03660046112d6565b6104cf565b6101836101d33660046112d6565b6105e3565b6101e0610702565b6040516101a99190611820565b6101f5610708565b6040516101a992919061184c565b6101e061081f565b610213610825565b6040516101a991906113f4565b61018361022e366004611311565b61082e565b61023b610872565b6040516101a99190611389565b610183610256366004611341565b610881565b6101836102693660046112d6565b6109a4565b610183610a6a565b6101e06102843660046112d6565b610aa9565b61023b610ada565b61018361029f3660046112d6565b610aee565b61023b610b8f565b6101836102ba3660046112d6565b610b9e565b6101e06102cd3660046112d6565b610c81565b61023b610db8565b600260005414156103065760405162461bcd60e51b81526004016102fd906117e9565b60405180910390fd5b6002600055610313610825565b156103305760405162461bcd60e51b81526004016102fd906115d2565b610339816104cf565b3360009081526006602052604081206003810154815491929164e8d4a51000916103639190610dc7565b8161036a57fe5b049050600061038e610389846001015484610e0a90919063ffffffff16565b610e50565b90506103c064e8d4a510006103b0856003015488610dc790919063ffffffff16565b816103b757fe5b84919004610e0a565b600184015582546103d19086610e76565b83556004546002546103f1916001600160a01b0391821691168684610e9e565b600354610408906001600160a01b03168587610f29565b836001600160a01b0316336001600160a01b03167f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b28760405161044b9190611820565b60405180910390a3336001600160a01b03167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d48260405161048c9190611820565b60405180910390a250506001600055505050565b600660205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b6001600160a01b0381166000908152600660205260408120906104f183610aa9565b905081600401544211156105de5781541561058857600061051f836004015442610e7690919063ffffffff16565b905060006105616301e1338061055b61271061055b8761055564e8d4a510006105558a8d60000154610dc790919063ffffffff16565b90610dc7565b90610f48565b845490915061058090610575908390610f48565b600386015490610f7a565b600385015550505b4260048301819055825460038401546040516001600160a01b038716937f029af3fb3c244c9fb9fd3c42dbd1e98392f2f98d6b6fb32304ad04382d4a5e80936105d593919290919061185a565b60405180910390a25b505050565b600260005414156106065760405162461bcd60e51b81526004016102fd906117e9565b6002600055610613610825565b156106305760405162461bcd60e51b81526004016102fd906115d2565b610639816104cf565b3360009081526006602052604081206003810154815491929164e8d4a51000916106639190610dc7565b8161066a57fe5b0490506000610689610389846001015484610e0a90919063ffffffff16565b60018401839055905080156106b6576004546002546106b6916001600160a01b0391821691168684610e9e565b336001600160a01b03167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040516106ef9190611820565b60405180910390a2505060016000555050565b60055481565b600254600480546040516370a0823160e01b815260009384936001600160a01b03918216936370a0823193610741939091169101611389565b60206040518083038186803b15801561075957600080fd5b505afa15801561076d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107919190611329565b60025460048054604051636eb1769f60e11b81529395506001600160a01b039283169363dd62ed3e936107c99392169130910161139d565b60206040518083038186803b1580156107e157600080fd5b505afa1580156107f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108199190611329565b90509091565b61271081565b60015460ff1690565b610836610f9f565b6001600160a01b0316610847610ada565b6001600160a01b03161461086d5760405162461bcd60e51b81526004016102fd9061167f565b600555565b6003546001600160a01b031681565b600260005414156108a45760405162461bcd60e51b81526004016102fd906117e9565b60026000556108b1610825565b156108ce5760405162461bcd60e51b81526004016102fd906115d2565b6108d7816104cf565b6001600160a01b038116600090815260066020526040902042600282015580546109019084610f7a565b815560038101546109329064e8d4a510009061091e908690610dc7565b8161092557fe5b6001840154919004610fa3565b600182015560035461094f906001600160a01b0316333086610e9e565b816001600160a01b0316336001600160a01b03167fe31c7b8d08ee7db0afa68782e1028ef92305caeea8626633ad44d413e30f6b2f856040516109929190611820565b60405180910390a35050600160005550565b600260005414156109c75760405162461bcd60e51b81526004016102fd906117e9565b60026000556109d4610825565b156109f15760405162461bcd60e51b81526004016102fd906115d2565b33600090815260066020526040812080548282556001820192909255600354909190610a27906001600160a01b03168483610f29565b826001600160a01b0316336001600160a01b03167faaeda929aa102e867049528ec7cd2499e3a2f8846e736ae7935f234dfbf500d9836040516109929190611820565b610a72610f9f565b6001600160a01b0316610a83610ada565b6001600160a01b03161461016b5760405162461bcd60e51b81526004016102fd9061167f565b600080610ab583610fe9565b9050610ad1600a61055b83600554610dc790919063ffffffff16565b9150505b919050565b60015461010090046001600160a01b031690565b610af6610f9f565b6001600160a01b0316610b07610ada565b6001600160a01b031614610b2d5760405162461bcd60e51b81526004016102fd9061167f565b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517ffdd8f4378171881d7612b21a5d9673d49f25072ed487831bb7baf1bdee37bf0290600090a250565b6004546001600160a01b031681565b610ba6610f9f565b6001600160a01b0316610bb7610ada565b6001600160a01b031614610bdd5760405162461bcd60e51b81526004016102fd9061167f565b6001600160a01b038116610c035760405162461bcd60e51b81526004016102fd90611432565b6001546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b6000610c8b611290565b506001600160a01b0382166000908152600660209081526040808320815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830181905260049091015460808301529091610ced85610aa9565b9050826080015142118015610d025750825115155b15610d76576000610d20846080015142610e7690919063ffffffff16565b90506000610d566301e1338061055b61271061055b8761055564e8d4a510006105558a8e60000151610dc790919063ffffffff16565b9050610d7185600001518281610d6857fe5b86919004610f7a565b935050505b610daf6103898460200151610da9610da464e8d4a5100061055b888a60000151610dc790919063ffffffff16565b6110c3565b90610e0a565b95945050505050565b6002546001600160a01b031681565b600082610dd657506000610e04565b82820282848281610de357fe5b0414610e015760405162461bcd60e51b81526004016102fd9061163e565b90505b92915050565b6000818303818312801590610e1f5750838113155b80610e345750600083128015610e3457508381135b610e015760405162461bcd60e51b81526004016102fd90611748565b600080821215610e725760405162461bcd60e51b81526004016102fd90611609565b5090565b600082821115610e985760405162461bcd60e51b81526004016102fd90611507565b50900390565b610f23846323b872dd60e01b858585604051602401610ebf939291906113b7565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526110e8565b50505050565b6105de8363a9059cbb60e01b8484604051602401610ebf9291906113db565b6000808211610f695760405162461bcd60e51b81526004016102fd9061159b565b818381610f7257fe5b049392505050565b600082820183811015610e015760405162461bcd60e51b81526004016102fd9061148f565b3390565b6000828201818312801590610fb85750838112155b80610fcd5750600083128015610fcd57508381125b610e015760405162461bcd60e51b81526004016102fd906114c6565b6000610ff3611290565b506001600160a01b038216600090815260066020908152604091829020825160a08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260040154608083015269010f0cf064dd592000001115611063576000915050610ad5565b805169032d26d12e980b6000001115611080576005915050610ad5565b80516907695a92c20d6fe00000111561109d57600a915050610ad5565b805169152d02c7e14af680000011156110ba57600f915050610ad5565b50601492915050565b6000600160ff1b8210610e725760405162461bcd60e51b81526004016102fd906116eb565b606061113d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111779092919063ffffffff16565b8051909150156105de578080602001905181019061115b91906112f1565b6105de5760405162461bcd60e51b81526004016102fd9061178c565b60606111868484600085611190565b90505b9392505050565b6060824710156111b25760405162461bcd60e51b81526004016102fd9061153e565b6111bb85611251565b6111d75760405162461bcd60e51b81526004016102fd906116b4565b60006060866001600160a01b031685876040516111f4919061136d565b60006040518083038185875af1925050503d8060008114611231576040519150601f19603f3d011682016040523d82523d6000602084013e611236565b606091505b5091509150611246828286611257565b979650505050505050565b3b151590565b60608315611266575081611189565b8251156112765782518084602001fd5b8160405162461bcd60e51b81526004016102fd91906113ff565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b0381168114610e0457600080fd5b6000602082840312156112e7578081fd5b61118983836112bf565b600060208284031215611302578081fd5b81518015158114610e01578182fd5b600060208284031215611322578081fd5b5035919050565b60006020828403121561133a578081fd5b5051919050565b60008060408385031215611353578081fd5b8235915061136484602085016112bf565b90509250929050565b6000825161137f818460208701611870565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060208252825180602084015261141e816040850160208701611870565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252818101527f53616665436173743a2076616c7565206d75737420626520706f736974697665604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526028908201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160408201527f6e20696e74323536000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b948552602085019390935260408401919091526060830152608082015260a00190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60005b8381101561188b578181015183820152602001611873565b83811115610f23575050600091015256fea2646970667358221220164b8c5bd651f1546e9c7328c4ca0cd35b8f01400c052ae89337bdc3fb20ced564736f6c634300060c0033",
  "devdoc": {
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "availableReward()": {
        "returns": {
          "rewardAllowedForThisPool": "allowed reward amount to be spent by this pool",
          "rewardInTreasury": "reward amount in treasury"
        }
      },
      "claim(address)": {
        "details": "Here comes the formula to calculate reward token amount",
        "params": {
          "to": "Receiver of rewards."
        }
      },
      "constructor": {
        "params": {
          "_baseAPY": "The APY of reward to be distributed per second.",
          "_lpToken": "The staking contract address.",
          "_rewardToken": "The reward token contract address.",
          "_rewardTreasury": "The reward treasury contract address."
        }
      },
      "deposit(uint256,address)": {
        "params": {
          "amount": "LP token amount to deposit.",
          "to": "The receiver of `amount` deposit benefit."
        }
      },
      "emergencyWithdraw(address)": {
        "params": {
          "to": "Receiver of the LP tokens."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingReward(address)": {
        "details": "It doens't update accRewardPerShare, it's just a view function.",
        "params": {
          "_user": "Address of user."
        },
        "returns": {
          "pending": "reward for a given user."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewardAPY(address)": {
        "returns": {
          "_0": "APY"
        }
      },
      "setBaseAPY(uint256)": {
        "details": "Its decimals count is ACC_REWARD_PRECISION",
        "params": {
          "_baseAPY": "The amount of reward to be distributed per second."
        }
      },
      "setRewardTreasury(address)": {
        "params": {
          "_wallet": "address that contains the rewards"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "update(address)": {
        "details": "Updates accRewardPerShare and lastRewardTime."
      },
      "withdraw(uint256,address)": {
        "params": {
          "amount": "LP token amount to withdraw.",
          "to": "Receiver of the LP tokens and rewards."
        }
      }
    },
    "title": "Staking Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "availableReward()": {
        "notice": "return available reward amount"
      },
      "baseAPY()": {
        "notice": "APY."
      },
      "claim(address)": {
        "notice": "Claim rewards and send to `to`."
      },
      "deposit(uint256,address)": {
        "notice": "Deposit LP tokens for reward allocation."
      },
      "emergencyWithdraw(address)": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY."
      },
      "lpToken()": {
        "notice": "Address of the LP token."
      },
      "pendingReward(address)": {
        "notice": "View function to see pending reward on frontend."
      },
      "rewardAPY(address)": {
        "notice": "Caclulates the reward apy of the user"
      },
      "rewardToken()": {
        "notice": "Address of reward contract."
      },
      "rewardTreasury()": {
        "notice": "Reward treasury"
      },
      "setBaseAPY(uint256)": {
        "notice": "Sets the reward per second to be distributed. Can only be called by the owner."
      },
      "setRewardTreasury(address)": {
        "notice": "set reward wallet"
      },
      "update(address)": {
        "notice": "Update reward variables."
      },
      "userInfo(address)": {
        "notice": "Info of each user that stakes LP tokens."
      },
      "withdraw(uint256,address)": {
        "notice": "Withdraw LP tokens and harvest rewards to `to`."
      }
    },
    "notice": "You can use this contract for staking tokens and distribute rewards",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3043,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2958,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "_owner",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8500,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1306"
      },
      {
        "astId": 8503,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "lpToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1306"
      },
      {
        "astId": 8506,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "rewardTreasury",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8509,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "baseAPY",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 8514,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "userInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(UserInfo)8491_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1306": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UserInfo)8491_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Staking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)8491_storage"
      },
      "t_struct(UserInfo)8491_storage": {
        "encoding": "inplace",
        "label": "struct Staking.UserInfo",
        "members": [
          {
            "astId": 8482,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8484,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 8486,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "lastDepositedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8488,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8490,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}